/*
Gridfile importer script. Using the 'rgdal' package of R.
Transfers the RGB data to ImageJ.

Author: M. Austenfeld 
Year:   2008

 */

if (RServe.isAliveDialog()) {
 RConnection c=RServe.getConnection();
	if (c.eval("require(rgdal)").isTrue()[0]) {

		String file = Bio7Dialog.openFile(new String[] { "*" });

		if (file != null) {

			if (Bio7Dialog.getOS().equals("Windows")) {
				file = file.replace("\\", "\\\\");
			}
			System.out.println(file);
			
			File f = new File(file);

			String name = null;
			/*Extract the name of the file!*/
			int occur=f.getName().lastIndexOf(".");
			
			if(occur!=-1){
			name=f.getName().substring(0, f.getName().lastIndexOf("."));
			}
            else{
            	name=f.getName();
            }
			/*Read the grid file with the filename as the layer!*/
			RServe.getConnection().eval(
				"try(" + name + " <- readGDAL(\"" + file + "\"));");

			System.out.println("Loaded Grid: " + name + "\n");

			RServe.print("try(summary(" + name + "))");
			/*We need to access the cell size by means of the slots!*/
			c.eval("try(a<-slot(" + name + ",\"grid\"))");
			c.eval("try(dim<-slot(a,\"cells.dim\"))");
            c.eval("try(imageSizeX<-dim[1]);try(imageSizeY<-dim[2])");
			/*Create an image Matrix for every bands!*/
			c.eval("try(imageMatrixR<-as.raw("+name+"$band1))");
			c.eval("try(imageMatrixG<-as.raw("+name+"$band2))");
			c.eval("try(imageMatrixB<-as.raw("+name+"$band3))");
			/*Create images from the band data transfered to ImageJ*/
			ImageMethods.imageFromR(1, "imageMatrixR",2);
			ImageMethods.imageFromR(1, "imageMatrixG",2);
			ImageMethods.imageFromR(1, "imageMatrixB",2);
			/*Access bounding box for WorldWind!*/
			
			c.eval("try(bbox<-slot("+name+",\"bbox\"))");
			double minLat = (double) c.eval("bbox[2]").asDouble();
			double maxLat = (double) c.eval("bbox[4]").asDouble();
			double minLon = (double) c.eval("bbox[1]").asDouble();
			double maxLon = (double) c.eval("bbox[3]").asDouble();
			/*Transfer Lat Lon to WorldWind if active!*/
			if(WorldWindOptionsView.getOptionsInstance()!=null){
			WorldWindOptionsView.setMinLat(Double.toString(minLat));
			WorldWindOptionsView.setMaxLat(Double.toString(maxLat));
			WorldWindOptionsView.setMinLon(Double.toString(minLon));
			WorldWindOptionsView.setMaxLon(Double.toString(maxLon));
			}

			/*Cleanup and remove variables!*/
			c.eval("try(remove(a));");
			c.eval("try(remove(dim));");
			c.eval("try(remove(imageMatrixR));");
			c.eval("try(remove(imageMatrixG));");
			c.eval("try(remove(imageMatrixB));");

			/*Merge bands to a RGB image!*/			
					
			ij.IJ.run("Merge Channels...", "red=imageMatrixR green=imageMatrixG blue=imageMatrixB gray=*None*");

		}

	} else {
		Bio7Dialog.message("Can't load 'rgdal' package!");
	}
}