package:Rserve:::bio7:::Rserve(debug=FALSE,port,args=NULL,quote=(length(args)>1),wait,...)
package:Rserve:::bio7:::run.Rserve(...,config.file="/etc/Rserve.conf")
package:Rserve:::bio7:::self.ctrlEval(expr)
package:Rserve:::bio7:::self.ctrlSource(file)
package:Rserve:::bio7:::self.oobMessage(what,code=0)
package:Rserve:::bio7:::self.oobSend(what,code=0)
package:stats:::bio7:::acf(x,lag.max=NULL,type=c("correlation","covariance","partial"),plot=TRUE,na.action=na.fail,demean=TRUE,...)
package:stats:::bio7:::acf2AR(acf)
package:stats:::bio7:::add.scope(terms1,terms2)
package:stats:::bio7:::add1(object,scope,...)
package:stats:::bio7:::addmargins(A,margin=seq_along(dim(A)),FUN=sum,quiet=FALSE)
package:stats:::bio7:::aggregate(x,...)
package:stats:::bio7:::aggregate.data.frame(x,by,FUN,...,simplify=TRUE)
package:stats:::bio7:::aggregate.ts(x,nfrequency=1,FUN=sum,ndeltat=1,ts.eps=getOption("ts.eps"),...)
package:stats:::bio7:::AIC(object,...,k=2)
package:stats:::bio7:::alias(object,...)
package:stats:::bio7:::anova(object,...)
package:stats:::bio7:::ansari.test(x,...)
package:stats:::bio7:::aov(formula,data=NULL,projections=FALSE,qr=TRUE,contrasts=NULL,...)
package:stats:::bio7:::approx(x,y=NULL,xout,method="linear",n=50,yleft,yright,rule=1,f=0,ties=mean)
package:stats:::bio7:::approxfun(x,y=NULL,method="linear",yleft,yright,rule=1,f=0,ties=mean)
package:stats:::bio7:::ar(x,aic=TRUE,order.max=NULL,method=c("yule-walker","burg","ols","mle","yw"),na.action=na.fail,series=deparse(substitute(x)),...)
package:stats:::bio7:::ar.burg(x,...)
package:stats:::bio7:::ar.mle(x,aic=TRUE,order.max=NULL,na.action=na.fail,demean=TRUE,series=NULL,...)
package:stats:::bio7:::ar.ols(x,aic=TRUE,order.max=NULL,na.action=na.fail,demean=TRUE,intercept=demean,series=NULL,...)
package:stats:::bio7:::ar.yw(x,...)
package:stats:::bio7:::arima(x,order=c(0,0,0),seasonal=list(order=c(0,0,0),period=NA),xreg=NULL,include.mean=TRUE,transform.pars=TRUE,fixed=NULL,init=NULL,method=c("CSS-ML","ML","CSS"),n.cond,SSinit=c("Gardner1980","Rossignol2011"),optim.method="BFGS",optim.control=list(),kappa=1e+06)
package:stats:::bio7:::arima.sim(model,n,rand.gen=rnorm,innov=rand.gen(n,...),n.start=NA,start.innov=rand.gen(n.start,...),...)
package:stats:::bio7:::arima0(x,order=c(0,0,0),seasonal=list(order=c(0,0,0),period=NA),xreg=NULL,include.mean=TRUE,delta=0.01,transform.pars=TRUE,fixed=NULL,init=NULL,method=c("ML","CSS"),n.cond,optim.control=list())
package:stats:::bio7:::arima0.diag(...)
package:stats:::bio7:::ARMAacf(ar=numeric(),ma=numeric(),lag.max=r,pacf=FALSE)
package:stats:::bio7:::ARMAtoMA(ar=numeric(),ma=numeric(),lag.max)
package:stats:::bio7:::as.dendrogram(object,...)
package:stats:::bio7:::as.dist(m,diag=FALSE,upper=FALSE)
package:stats:::bio7:::as.formula(object,env=parent.frame())
package:stats:::bio7:::as.hclust(x,...)
package:stats:::bio7:::as.stepfun(x,...)
package:stats:::bio7:::as.ts(x,...)
package:stats:::bio7:::asOneSidedFormula(object)
package:stats:::bio7:::ave(x,...,FUN=mean)
package:stats:::bio7:::bandwidth.kernel(k)
package:stats:::bio7:::bartlett.test(x,...)
package:stats:::bio7:::BIC(object,...)
package:stats:::bio7:::binom.test(x,n,p=0.5,alternative=c("two.sided","less","greater"),conf.level=0.95)
package:stats:::bio7:::binomial(link="logit")
package:stats:::bio7:::biplot(x,...)
package:stats:::bio7:::Box.test(x,lag=1,type=c("Box-Pierce","Ljung-Box"),fitdf=0)
package:stats:::bio7:::bw.bcv(x,nb=1000,lower=0.1*hmax,upper=hmax,tol=0.1*lower)
package:stats:::bio7:::bw.nrd(x)
package:stats:::bio7:::bw.nrd0(x)
package:stats:::bio7:::bw.SJ(x,nb=1000,lower=0.1*hmax,upper=hmax,method=c("ste","dpi"),tol=0.1*lower)
package:stats:::bio7:::bw.ucv(x,nb=1000,lower=0.1*hmax,upper=hmax,tol=0.1*lower)
package:stats:::bio7:::C(object,contr,how.many,...)
package:stats:::bio7:::cancor(x,y,xcenter=TRUE,ycenter=TRUE)
package:stats:::bio7:::case.names(object,...)
package:stats:::bio7:::ccf(x,y,lag.max=NULL,type=c("correlation","covariance"),plot=TRUE,na.action=na.fail,...)
package:stats:::bio7:::chisq.test(x,y=NULL,correct=TRUE,p=rep(1/length(x),length(x)),rescale.p=FALSE,simulate.p.value=FALSE,B=2000)
package:stats:::bio7:::cmdscale(d,k=2,eig=FALSE,add=FALSE,x.ret=FALSE)
package:stats:::bio7:::coef(object,...)
package:stats:::bio7:::coefficients(object,...)
package:stats:::bio7:::complete.cases(...)
package:stats:::bio7:::confint(object,parm,level=0.95,...)
package:stats:::bio7:::confint.default(object,parm,level=0.95,...)
package:stats:::bio7:::confint.lm(object,parm,level=0.95,...)
package:stats:::bio7:::constrOptim(theta,f,grad,ui,ci,mu=1e-04,control=list(),method=if(is.null(grad))"Nelder-Mead"else"BFGS",outer.iterations=100,outer.eps=1e-05,...,hessian=FALSE)
package:stats:::bio7:::contr.helmert(n,contrasts=TRUE,sparse=FALSE)
package:stats:::bio7:::contr.poly(n,scores=1:n,contrasts=TRUE,sparse=FALSE)
package:stats:::bio7:::contr.SAS(n,contrasts=TRUE,sparse=FALSE)
package:stats:::bio7:::contr.sum(n,contrasts=TRUE,sparse=FALSE)
package:stats:::bio7:::contr.treatment(n,base=1,contrasts=TRUE,sparse=FALSE)
package:stats:::bio7:::contrasts(x,contrasts=TRUE,sparse=FALSE)
package:stats:::bio7:::contrasts<-(x,how.many,value)
package:stats:::bio7:::convolve(x,y,conj=TRUE,type=c("circular","open","filter"))
package:stats:::bio7:::cooks.distance(model,...)
package:stats:::bio7:::cophenetic(x)
package:stats:::bio7:::cor(x,y=NULL,use="everything",method=c("pearson","kendall","spearman"))
package:stats:::bio7:::cor.test(x,...)
package:stats:::bio7:::cov(x,y=NULL,use="everything",method=c("pearson","kendall","spearman"))
package:stats:::bio7:::cov.wt(x,wt=rep(1/nrow(x),nrow(x)),cor=FALSE,center=TRUE,method=c("unbiased","ML"))
package:stats:::bio7:::cov2cor(V)
package:stats:::bio7:::covratio(model,infl=lm.influence(model,do.coef=FALSE),res=weighted.residuals(model))
package:stats:::bio7:::cpgram(ts,taper=0.1,main=paste("Series:",deparse(substitute(ts))),ci.col="blue")
package:stats:::bio7:::cutree(tree,k=NULL,h=NULL)
package:stats:::bio7:::cycle(x,...)
package:stats:::bio7:::D(expr,name)
package:stats:::bio7:::dbeta(x,shape1,shape2,ncp=0,log=FALSE)
package:stats:::bio7:::dbinom(x,size,prob,log=FALSE)
package:stats:::bio7:::dcauchy(x,location=0,scale=1,log=FALSE)
package:stats:::bio7:::dchisq(x,df,ncp=0,log=FALSE)
package:stats:::bio7:::decompose(x,type=c("additive","multiplicative"),filter=NULL)
package:stats:::bio7:::delete.response(termobj)
package:stats:::bio7:::deltat(x,...)
package:stats:::bio7:::dendrapply(X,FUN,...)
package:stats:::bio7:::density(x,...)
package:stats:::bio7:::density.default(x,bw="nrd0",adjust=1,kernel=c("gaussian","epanechnikov","rectangular","triangular","biweight","cosine","optcosine"),weights=NULL,window=kernel,width,give.Rkern=FALSE,n=512,from,to,cut=3,na.rm=FALSE,...)
package:stats:::bio7:::deriv(expr,...)
package:stats:::bio7:::deriv3(expr,...)
package:stats:::bio7:::deviance(object,...)
package:stats:::bio7:::dexp(x,rate=1,log=FALSE)
package:stats:::bio7:::df(x,df1,df2,ncp,log=FALSE)
package:stats:::bio7:::df.kernel(k)
package:stats:::bio7:::df.residual(object,...)
package:stats:::bio7:::dfbeta(model,...)
package:stats:::bio7:::dfbetas(model,...)
package:stats:::bio7:::dffits(model,infl=lm.influence(model,do.coef=FALSE),res=weighted.residuals(model))
package:stats:::bio7:::dgamma(x,shape,rate=1,scale=1/rate,log=FALSE)
package:stats:::bio7:::dgeom(x,prob,log=FALSE)
package:stats:::bio7:::dhyper(x,m,n,k,log=FALSE)
package:stats:::bio7:::diffinv(x,...)
package:stats:::bio7:::dist(x,method="euclidean",diag=FALSE,upper=FALSE,p=2)
package:stats:::bio7:::dlnorm(x,meanlog=0,sdlog=1,log=FALSE)
package:stats:::bio7:::dlogis(x,location=0,scale=1,log=FALSE)
package:stats:::bio7:::dmultinom(x,size=NULL,prob,log=FALSE)
package:stats:::bio7:::dnbinom(x,size,prob,mu,log=FALSE)
package:stats:::bio7:::dnorm(x,mean=0,sd=1,log=FALSE)
package:stats:::bio7:::dpois(x,lambda,log=FALSE)
package:stats:::bio7:::drop.scope(terms1,terms2)
package:stats:::bio7:::drop.terms(termobj,dropx=NULL,keep.response=FALSE)
package:stats:::bio7:::drop1(object,scope,...)
package:stats:::bio7:::dsignrank(x,n,log=FALSE)
package:stats:::bio7:::dt(x,df,ncp,log=FALSE)
package:stats:::bio7:::dummy.coef(object,...)
package:stats:::bio7:::dummy.coef.lm(object,use.na=FALSE,...)
package:stats:::bio7:::dunif(x,min=0,max=1,log=FALSE)
package:stats:::bio7:::dweibull(x,shape,scale=1,log=FALSE)
package:stats:::bio7:::dwilcox(x,m,n,log=FALSE)
package:stats:::bio7:::ecdf(x)
package:stats:::bio7:::eff.aovlist(aovlist)
package:stats:::bio7:::effects(object,...)
package:stats:::bio7:::embed(x,dimension=1)
package:stats:::bio7:::end(x,...)
package:stats:::bio7:::estVar(object,...)
package:stats:::bio7:::expand.model.frame(model,extras,envir=environment(formula(model)),na.expand=FALSE)
package:stats:::bio7:::extractAIC(fit,scale,k=2,...)
package:stats:::bio7:::factanal(x,factors,data=NULL,covmat=NULL,n.obs=NA,subset,na.action,start=NULL,scores=c("none","regression","Bartlett"),rotation="varimax",control=NULL,...)
package:stats:::bio7:::factor.scope(factor,scope)
package:stats:::bio7:::family(object,...)
package:stats:::bio7:::fft(z,inverse=FALSE)
package:stats:::bio7:::filter(x,filter,method=c("convolution","recursive"),sides=2,circular=FALSE,init=NULL)
package:stats:::bio7:::fisher.test(x,y=NULL,workspace=2e+05,hybrid=FALSE,control=list(),or=1,alternative="two.sided",conf.int=TRUE,conf.level=0.95,simulate.p.value=FALSE,B=2000)
package:stats:::bio7:::fitted(object,...)
package:stats:::bio7:::fitted.values(object,...)
package:stats:::bio7:::fivenum(x,na.rm=TRUE)
package:stats:::bio7:::fligner.test(x,...)
package:stats:::bio7:::formula(x,...)
package:stats:::bio7:::frequency(x,...)
package:stats:::bio7:::friedman.test(y,...)
package:stats:::bio7:::ftable(x,...)
package:stats:::bio7:::Gamma(link="inverse")
package:stats:::bio7:::gaussian(link="identity")
package:stats:::bio7:::get_all_vars(formula,data=NULL,...)
package:stats:::bio7:::getCall(x,...)
package:stats:::bio7:::getInitial(object,data,...)
package:stats:::bio7:::glm(formula,family=gaussian,data,weights,subset,na.action,start=NULL,etastart,mustart,offset,control=list(...),model=TRUE,method="glm.fit",x=FALSE,y=TRUE,contrasts=NULL,...)
package:stats:::bio7:::glm.control(epsilon=1e-08,maxit=25,trace=FALSE)
package:stats:::bio7:::glm.fit(x,y,weights=rep(1,nobs),start=NULL,etastart=NULL,mustart=NULL,offset=rep(0,nobs),family=gaussian(),control=list(),intercept=TRUE)
package:stats:::bio7:::hasTsp(x)
package:stats:::bio7:::hat(x,intercept=TRUE)
package:stats:::bio7:::hatvalues(model,...)
package:stats:::bio7:::hclust(d,method="complete",members=NULL)
package:stats:::bio7:::heatmap(x,Rowv=NULL,Colv=if(symm)"Rowv"elseNULL,distfun=dist,hclustfun=hclust,reorderfun=(d,w)reorder(d,w),add.expr,symm=FALSE,revC=identical(Colv,"Rowv"),scale=c("row","column","none"),na.rm=TRUE,margins=c(5,5),ColSideColors,RowSideColors,cexRow=0.2+1/log10(nr),cexCol=0.2+1/log10(nc),labRow=NULL,labCol=NULL,main=NULL,xlab=NULL,ylab=NULL,keep.dendro=FALSE,verbose=getOption("verbose"),...)
package:stats:::bio7:::HoltWinters(x,alpha=NULL,beta=NULL,gamma=NULL,seasonal=c("additive","multiplicative"),start.periods=2,l.start=NULL,b.start=NULL,s.start=NULL,optim.start=c(alpha=0.3,beta=0.1,gamma=0.1),optim.control=list())
package:stats:::bio7:::influence(model,...)
package:stats:::bio7:::influence.measures(model)
package:stats:::bio7:::integrate(f,lower,upper,...,subdivisions=100,rel.tol=.Machine$double.eps^0.25,abs.tol=rel.tol,stop.on.error=TRUE,keep.xy=FALSE,aux=NULL)
package:stats:::bio7:::interaction.plot(x.factor,trace.factor,response,fun=mean,type=c("l","p","b","o","c"),legend=TRUE,trace.label=deparse(substitute(trace.factor)),fixed=FALSE,xlab=deparse(substitute(x.factor)),ylab=ylabel,ylim=range(cells,na.rm=TRUE),lty=nc:1,col=1,pch=c(1:9,0,letters),xpd=NULL,leg.bg=par("bg"),leg.bty="n",xtick=FALSE,xaxt=par("xaxt"),axes=TRUE,...)
package:stats:::bio7:::inverse.gaussian(link="1/mu^2")
package:stats:::bio7:::IQR(x,na.rm=FALSE,type=7)
package:stats:::bio7:::is.empty.model(x)
package:stats:::bio7:::is.leaf(object)
package:stats:::bio7:::is.mts(x)
package:stats:::bio7:::is.stepfun(x)
package:stats:::bio7:::is.ts(x)
package:stats:::bio7:::is.tskernel(k)
package:stats:::bio7:::isoreg(x,y=NULL)
package:stats:::bio7:::KalmanForecast(n.ahead=10,mod,update=FALSE)
package:stats:::bio7:::KalmanLike(y,mod,nit=0,update=FALSE)
package:stats:::bio7:::KalmanRun(y,mod,nit=0,update=FALSE)
package:stats:::bio7:::KalmanSmooth(y,mod,nit=0)
package:stats:::bio7:::kernapply(x,...)
package:stats:::bio7:::kernel(coef,m=2,r,name="unknown")
package:stats:::bio7:::kmeans(x,centers,iter.max=10,nstart=1,algorithm=c("Hartigan-Wong","Lloyd","Forgy","MacQueen"),trace=FALSE)
package:stats:::bio7:::knots(Fn,...)
package:stats:::bio7:::kruskal.test(x,...)
package:stats:::bio7:::ks.test(x,y,...,alternative=c("two.sided","less","greater"),exact=NULL)
package:stats:::bio7:::ksmooth(x,y,kernel=c("box","normal"),bandwidth=0.5,range.x=range(x),n.points=max(100,length(x)),x.points)
package:stats:::bio7:::lag(x,...)
package:stats:::bio7:::lag.plot(x,lags=1,layout=NULL,set.lags=1:lags,main=NULL,asp=1,diag=TRUE,diag.col="gray",type="p",oma=NULL,ask=NULL,do.lines=(n<=150),labels=do.lines,...)
package:stats:::bio7:::line(x,y=NULL)
package:stats:::bio7:::lm(formula,data,subset,weights,na.action,method="qr",model=TRUE,x=FALSE,y=FALSE,qr=TRUE,singular.ok=TRUE,contrasts=NULL,offset,...)
package:stats:::bio7:::lm.fit(x,y,offset=NULL,method="qr",tol=1e-07,singular.ok=TRUE,...)
package:stats:::bio7:::lm.influence(model,do.coef=TRUE)
package:stats:::bio7:::lm.wfit(x,y,w,offset=NULL,method="qr",tol=1e-07,singular.ok=TRUE,...)
package:stats:::bio7:::loadings(x,...)
package:stats:::bio7:::loess(formula,data,weights,subset,na.action,model=FALSE,span=0.75,enp.target,degree=2,parametric=FALSE,drop.square=FALSE,normalize=TRUE,family=c("gaussian","symmetric"),method=c("loess","model.frame"),control=loess.control(...),...)
package:stats:::bio7:::loess.control(surface=c("interpolate","direct"),statistics=c("approximate","exact"),trace.hat=c("exact","approximate"),cell=0.2,iterations=4,...)
package:stats:::bio7:::loess.smooth(x,y,span=2/3,degree=1,family=c("symmetric","gaussian"),evaluation=50,...)
package:stats:::bio7:::logLik(object,...)
package:stats:::bio7:::loglin(table,margin,start=rep(1,length(table)),fit=FALSE,eps=0.1,iter=20,param=FALSE,print=TRUE)
package:stats:::bio7:::lowess(x,y=NULL,f=2/3,iter=3,delta=0.01*diff(range(x)))
package:stats:::bio7:::ls.diag(ls.out)
package:stats:::bio7:::ls.print(ls.out,digits=4,print.it=TRUE)
package:stats:::bio7:::lsfit(x,y,wt=NULL,intercept=TRUE,tolerance=1e-07,yname=NULL)
package:stats:::bio7:::mad(x,center=median(x),constant=1.4826,na.rm=FALSE,low=FALSE,high=FALSE)
package:stats:::bio7:::mahalanobis(x,center,cov,inverted=FALSE,...)
package:stats:::bio7:::make.link(link)
package:stats:::bio7:::makeARIMA(phi,theta,Delta,kappa=1e+06,SSinit=c("Gardner1980","Rossignol2011"),tol=.Machine$double.eps)
package:stats:::bio7:::makepredictcall(var,call)
package:stats:::bio7:::manova(...)
package:stats:::bio7:::mantelhaen.test(x,y=NULL,z=NULL,alternative=c("two.sided","less","greater"),correct=TRUE,exact=FALSE,conf.level=0.95)
package:stats:::bio7:::mauchly.test(object,...)
package:stats:::bio7:::mcnemar.test(x,y=NULL,correct=TRUE)
package:stats:::bio7:::median(x,na.rm=FALSE)
package:stats:::bio7:::median.default(x,na.rm=FALSE)
package:stats:::bio7:::medpolish(x,eps=0.01,maxiter=10,trace.iter=TRUE,na.rm=FALSE)
package:stats:::bio7:::model.extract(frame,component)
package:stats:::bio7:::model.frame(formula,...)
package:stats:::bio7:::model.frame.default(formula,data=NULL,subset=NULL,na.action=na.fail,drop.unused.levels=FALSE,xlev=NULL,...)
package:stats:::bio7:::model.matrix(object,...)
package:stats:::bio7:::model.matrix.default(object,data=environment(object),contrasts.arg=NULL,xlev=NULL,...)
package:stats:::bio7:::model.matrix.lm(object,...)
package:stats:::bio7:::model.offset(x)
package:stats:::bio7:::model.response(data,type="any")
package:stats:::bio7:::model.tables(x,...)
package:stats:::bio7:::model.weights(x)
package:stats:::bio7:::monthplot(x,...)
package:stats:::bio7:::mood.test(x,...)
package:stats:::bio7:::mvfft(z,inverse=FALSE)
package:stats:::bio7:::na.action(object,...)
package:stats:::bio7:::na.contiguous(object,...)
package:stats:::bio7:::na.exclude(object,...)
package:stats:::bio7:::na.fail(object,...)
package:stats:::bio7:::na.omit(object,...)
package:stats:::bio7:::na.pass(object,...)
package:stats:::bio7:::napredict(omit,x,...)
package:stats:::bio7:::naprint(x,...)
package:stats:::bio7:::naresid(omit,x,...)
package:stats:::bio7:::nextn(n,factors=c(2,3,5))
package:stats:::bio7:::nlm(f,p,...,hessian=FALSE,typsize=rep(1,length(p)),fscale=1,print.level=0,ndigit=12,gradtol=1e-06,stepmax=max(1000*sqrt(sum((p/typsize)^2)),1000),steptol=1e-06,iterlim=100,check.analyticals=TRUE)
package:stats:::bio7:::nlminb(start,objective,gradient=NULL,hessian=NULL,...,scale=1,control=list(),lower=-Inf,upper=Inf)
package:stats:::bio7:::nls(formula,data=parent.frame(),start,control=nls.control(),algorithm=c("default","plinear","port"),trace=FALSE,subset,weights,na.action,model=FALSE,lower=-Inf,upper=Inf,...)
package:stats:::bio7:::nls.control(maxiter=50,tol=1e-05,minFactor=1/1024,printEval=FALSE,warnOnly=FALSE)
package:stats:::bio7:::NLSstAsymptotic(xy)
package:stats:::bio7:::NLSstClosestX(xy,yval)
package:stats:::bio7:::NLSstLfAsymptote(xy)
package:stats:::bio7:::NLSstRtAsymptote(xy)
package:stats:::bio7:::nobs(object,...)
package:stats:::bio7:::numericDeriv(expr,theta,rho=parent.frame(),dir=1)
package:stats:::bio7:::offset(object)
package:stats:::bio7:::oneway.test(formula,data,subset,na.action,var.equal=FALSE)
package:stats:::bio7:::optim(par,fn,gr=NULL,...,method=c("Nelder-Mead","BFGS","CG","L-BFGS-B","SANN","Brent"),lower=-Inf,upper=Inf,control=list(),hessian=FALSE)
package:stats:::bio7:::optimHess(par,fn,gr=NULL,...,control=list())
package:stats:::bio7:::optimise(f,interval,...,lower=min(interval),upper=max(interval),maximum=FALSE,tol=.Machine$double.eps^0.25)
package:stats:::bio7:::optimize(f,interval,...,lower=min(interval),upper=max(interval),maximum=FALSE,tol=.Machine$double.eps^0.25)
package:stats:::bio7:::order.dendrogram(x)
package:stats:::bio7:::p.adjust(p,method=p.adjust.methods,n=length(p))
package:stats:::bio7:::p.adjust.methodsNA
package:stats:::bio7:::pacf(x,lag.max,plot,na.action,...)
package:stats:::bio7:::pairwise.prop.test(x,n,p.adjust.method=p.adjust.methods,...)
package:stats:::bio7:::pairwise.t.test(x,g,p.adjust.method=p.adjust.methods,pool.sd=!paired,paired=FALSE,alternative=c("two.sided","less","greater"),...)
package:stats:::bio7:::pairwise.table(compare.levels,level.names,p.adjust.method)
package:stats:::bio7:::pairwise.wilcox.test(x,g,p.adjust.method=p.adjust.methods,paired=FALSE,...)
package:stats:::bio7:::pbeta(q,shape1,shape2,ncp=0,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::pbinom(q,size,prob,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::pbirthday(n,classes=365,coincident=2)
package:stats:::bio7:::pcauchy(q,location=0,scale=1,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::pchisq(q,df,ncp=0,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::pexp(q,rate=1,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::pf(q,df1,df2,ncp,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::pgamma(q,shape,rate=1,scale=1/rate,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::pgeom(q,prob,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::phyper(q,m,n,k,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::plclust(tree,hang=0.1,unit=FALSE,level=FALSE,hmin=0,square=TRUE,labels=NULL,plot.=TRUE,axes=TRUE,frame.plot=FALSE,ann=TRUE,main="",sub=NULL,xlab=NULL,ylab="Height")
package:stats:::bio7:::plnorm(q,meanlog=0,sdlog=1,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::plogis(q,location=0,scale=1,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::plot.ecdf(x,...,ylab="Fn(x)",verticals=FALSE,col.01line="gray70",pch=19)
package:stats:::bio7:::plot.spec.coherency(x,ci=0.95,xlab="frequency",ylab="squaredcoherency",ylim=c(0,1),type="l",main=NULL,ci.col="blue",ci.lty=3,...)
package:stats:::bio7:::plot.spec.phase(x,ci=0.95,xlab="frequency",ylab="phase",ylim=c(-pi,pi),type="l",main=NULL,ci.col="blue",ci.lty=3,...)
package:stats:::bio7:::plot.stepfun(x,xval,xlim,ylim=range(c(y,Fn.kn)),xlab="x",ylab="f(x)",main=NULL,add=FALSE,verticals=TRUE,do.points=(n<1000),pch=par("pch"),col=par("col"),col.points=col,cex.points=par("cex"),col.hor=col,col.vert=col,lty=par("lty"),lwd=par("lwd"),...)
package:stats:::bio7:::plot.ts(x,y=NULL,plot.type=c("multiple","single"),xy.labels,xy.lines,panel=lines,nc,yax.flip=FALSE,mar.multi=c(0,5.1,0,if(yax.flip)5.1else2.1),oma.multi=c(6,0,5,0),axes=TRUE,...)
package:stats:::bio7:::pnbinom(q,size,prob,mu,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::pnorm(q,mean=0,sd=1,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::poisson(link="log")
package:stats:::bio7:::poisson.test(x,T=1,r=1,alternative=c("two.sided","less","greater"),conf.level=0.95)
package:stats:::bio7:::poly(x,...,degree=1,coefs=NULL,raw=FALSE)
package:stats:::bio7:::polym(...,degree=1,raw=FALSE)
package:stats:::bio7:::power(lambda=1)
package:stats:::bio7:::power.anova.test(groups=NULL,n=NULL,between.var=NULL,within.var=NULL,sig.level=0.05,power=NULL)
package:stats:::bio7:::power.prop.test(n=NULL,p1=NULL,p2=NULL,sig.level=0.05,power=NULL,alternative=c("two.sided","one.sided"),strict=FALSE)
package:stats:::bio7:::power.t.test(n=NULL,delta=NULL,sd=1,sig.level=0.05,power=NULL,type=c("two.sample","one.sample","paired"),alternative=c("two.sided","one.sided"),strict=FALSE)
package:stats:::bio7:::PP.test(x,lshort=TRUE)
package:stats:::bio7:::ppoints(n,a=ifelse(n<=10,3/8,1/2))
package:stats:::bio7:::ppois(q,lambda,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::ppr(x,...)
package:stats:::bio7:::prcomp(x,...)
package:stats:::bio7:::predict(object,...)
package:stats:::bio7:::predict.glm(object,newdata=NULL,type=c("link","response","terms"),se.fit=FALSE,dispersion=NULL,terms=NULL,na.action=na.pass,...)
package:stats:::bio7:::predict.lm(object,newdata,se.fit=FALSE,scale=NULL,df=Inf,interval=c("none","confidence","prediction"),level=0.95,type=c("response","terms"),terms=NULL,na.action=na.pass,pred.var=res.var/weights,weights=1,...)
package:stats:::bio7:::preplot(object,...)
package:stats:::bio7:::princomp(x,...)
package:stats:::bio7:::printCoefmat(x,digits=max(3,getOption("digits")-2),signif.stars=getOption("show.signif.stars"),signif.legend=signif.stars,dig.tst=max(1,min(5,digits-1)),cs.ind=1:k,tst.ind=k+1,zap.ind=integer(),P.values=NULL,has.Pvalue=nc>=4&&substr(colnames(x)[nc],1,3)=="Pr(",eps.Pvalue=.Machine$double.eps,na.print="NA",...)
package:stats:::bio7:::profile(fitted,...)
package:stats:::bio7:::proj(object,...)
package:stats:::bio7:::promax(x,m=4)
package:stats:::bio7:::prop.test(x,n,p=NULL,alternative=c("two.sided","less","greater"),conf.level=0.95,correct=TRUE)
package:stats:::bio7:::prop.trend.test(x,n,score=seq_along(x))
package:stats:::bio7:::psignrank(q,n,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::pt(q,df,ncp,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::ptukey(q,nmeans,df,nranges=1,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::punif(q,min=0,max=1,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::pweibull(q,shape,scale=1,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::pwilcox(q,m,n,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::qbeta(p,shape1,shape2,ncp=0,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::qbinom(p,size,prob,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::qbirthday(prob=0.5,classes=365,coincident=2)
package:stats:::bio7:::qcauchy(p,location=0,scale=1,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::qchisq(p,df,ncp=0,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::qexp(p,rate=1,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::qf(p,df1,df2,ncp,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::qgamma(p,shape,rate=1,scale=1/rate,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::qgeom(p,prob,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::qhyper(p,m,n,k,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::qlnorm(p,meanlog=0,sdlog=1,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::qlogis(p,location=0,scale=1,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::qnbinom(p,size,prob,mu,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::qnorm(p,mean=0,sd=1,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::qpois(p,lambda,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::qqline(y,datax=FALSE,distribution=qnorm,probs=c(0.25,0.75),qtype=7,...)
package:stats:::bio7:::qqnorm(y,...)
package:stats:::bio7:::qqplot(x,y,plot.it=TRUE,xlab=deparse(substitute(x)),ylab=deparse(substitute(y)),...)
package:stats:::bio7:::qsignrank(p,n,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::qt(p,df,ncp,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::qtukey(p,nmeans,df,nranges=1,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::quade.test(y,...)
package:stats:::bio7:::quantile(x,...)
package:stats:::bio7:::quasi(link="identity",variance="constant")
package:stats:::bio7:::quasibinomial(link="logit")
package:stats:::bio7:::quasipoisson(link="log")
package:stats:::bio7:::qunif(p,min=0,max=1,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::qweibull(p,shape,scale=1,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::qwilcox(p,m,n,lower.tail=TRUE,log.p=FALSE)
package:stats:::bio7:::r2dtable(n,r,c)
package:stats:::bio7:::rbeta(n,shape1,shape2,ncp=0)
package:stats:::bio7:::rbinom(n,size,prob)
package:stats:::bio7:::rcauchy(n,location=0,scale=1)
package:stats:::bio7:::rchisq(n,df,ncp=0)
package:stats:::bio7:::read.ftable(file,sep="",quote="\"",row.var.names,col.vars,skip=0)
package:stats:::bio7:::rect.hclust(tree,k=NULL,which=NULL,x=NULL,h=NULL,border=2,cluster=NULL)
package:stats:::bio7:::reformulate(termlabels,response=NULL,intercept=TRUE)
package:stats:::bio7:::relevel(x,ref,...)
package:stats:::bio7:::reorder(x,...)
package:stats:::bio7:::replications(formula,data=NULL,na.action)
package:stats:::bio7:::reshape(data,varying=NULL,v.names=NULL,timevar="time",idvar="id",ids=1:NROW(data),times=seq_along(varying[[1]]),drop=NULL,direction,new.row.names=NULL,sep=".",split=if(sep==""){list(regexp="[A-Za-z][0-9]",include=TRUE)}else{list(regexp=sep,include=FALSE,fixed=TRUE)})
package:stats:::bio7:::resid(object,...)
package:stats:::bio7:::residuals(object,...)
package:stats:::bio7:::residuals.glm(object,type=c("deviance","pearson","working","response","partial"),...)
package:stats:::bio7:::residuals.lm(object,type=c("working","response","deviance","pearson","partial"),...)
package:stats:::bio7:::rexp(n,rate=1)
package:stats:::bio7:::rf(n,df1,df2,ncp)
package:stats:::bio7:::rgamma(n,shape,rate=1,scale=1/rate)
package:stats:::bio7:::rgeom(n,prob)
package:stats:::bio7:::rhyper(nn,m,n,k)
package:stats:::bio7:::rlnorm(n,meanlog=0,sdlog=1)
package:stats:::bio7:::rlogis(n,location=0,scale=1)
package:stats:::bio7:::rmultinom(n,size,prob)
package:stats:::bio7:::rnbinom(n,size,prob,mu)
package:stats:::bio7:::rnorm(n,mean=0,sd=1)
package:stats:::bio7:::rpois(n,lambda)
package:stats:::bio7:::rsignrank(nn,n)
package:stats:::bio7:::rstandard(model,...)
package:stats:::bio7:::rstudent(model,...)
package:stats:::bio7:::rt(n,df,ncp)
package:stats:::bio7:::runif(n,min=0,max=1)
package:stats:::bio7:::runmed(x,k,endrule=c("median","keep","constant"),algorithm=NULL,print.level=0)
package:stats:::bio7:::rweibull(n,shape,scale=1)
package:stats:::bio7:::rwilcox(nn,m,n)
package:stats:::bio7:::rWishart(n,df,Sigma)
package:stats:::bio7:::scatter.smooth(x,y=NULL,span=2/3,degree=1,family=c("symmetric","gaussian"),xlab=NULL,ylab=NULL,ylim=range(y,pred$y,na.rm=TRUE),evaluation=50,...,lpars=list())
package:stats:::bio7:::screeplot(x,...)
package:stats:::bio7:::sd(x,na.rm=FALSE)
package:stats:::bio7:::se.contrast(object,...)
package:stats:::bio7:::selfStart(model,initial,parameters,template)
package:stats:::bio7:::setNames(object=nm,nm)
package:stats:::bio7:::shapiro.test(x)
package:stats:::bio7:::simulate(object,nsim=1,seed=NULL,...)
package:stats:::bio7:::smooth(x,kind=c("3RS3R","3RSS","3RSR","3R","3","S"),twiceit=FALSE,endrule="Tukey",do.ends=FALSE)
package:stats:::bio7:::smooth.spline(x,y=NULL,w=NULL,df,spar=NULL,cv=FALSE,all.knots=FALSE,nknots=.nknots.smspl,keep.data=TRUE,df.offset=0,penalty=1,control.spar=list(),tol=1e-06*IQR(x))
package:stats:::bio7:::smoothEnds(y,k=3)
package:stats:::bio7:::sortedXyData(x,y,data)
package:stats:::bio7:::spec.ar(x,n.freq,order=NULL,plot=TRUE,na.action=na.fail,method="yule-walker",...)
package:stats:::bio7:::spec.pgram(x,spans=NULL,kernel=NULL,taper=0.1,pad=0,fast=TRUE,demean=FALSE,detrend=TRUE,plot=TRUE,na.action=na.fail,...)
package:stats:::bio7:::spec.taper(x,p=0.1)
package:stats:::bio7:::spectrum(x,...,method=c("pgram","ar"))
package:stats:::bio7:::spline(x,y=NULL,n=3*length(x),method="fmm",xmin=min(x),xmax=max(x),xout,ties=mean)
package:stats:::bio7:::splinefun(x,y=NULL,method=c("fmm","periodic","natural","monoH.FC","hyman"),ties=mean)
package:stats:::bio7:::splinefunH(x,y,m)
package:stats:::bio7:::SSasymp(input,Asym,R0,lrc)
package:stats:::bio7:::SSasympOff(input,Asym,lrc,c0)
package:stats:::bio7:::SSasympOrig(input,Asym,lrc)
package:stats:::bio7:::SSbiexp(input,A1,lrc1,A2,lrc2)
package:stats:::bio7:::SSD(object,...)
package:stats:::bio7:::SSfol(Dose,input,lKe,lKa,lCl)
package:stats:::bio7:::SSfpl(input,A,B,xmid,scal)
package:stats:::bio7:::SSgompertz(x,Asym,b2,b3)
package:stats:::bio7:::SSlogis(input,Asym,xmid,scal)
package:stats:::bio7:::SSmicmen(input,Vm,K)
package:stats:::bio7:::SSweibull(x,Asym,Drop,lrc,pwr)
package:stats:::bio7:::start(x,...)
package:stats:::bio7:::stat.anova(table,test=c("Rao","LRT","Chisq","F","Cp"),scale,df.scale,n)
package:stats:::bio7:::step(object,scope,scale=0,direction=c("both","backward","forward"),trace=1,keep=NULL,steps=1000,k=2,...)
package:stats:::bio7:::stepfun(x,y,f=as.numeric(right),ties="ordered",right=FALSE)
package:stats:::bio7:::stl(x,s.window,s.degree=0,t.window=NULL,t.degree=1,l.window=nextodd(period),l.degree=t.degree,s.jump=ceiling(s.window/10),t.jump=ceiling(t.window/10),l.jump=ceiling(l.window/10),robust=FALSE,inner=if(robust)1else2,outer=if(robust)15else0,na.action=na.fail)
package:stats:::bio7:::StructTS(x,type=c("level","trend","BSM"),init=NULL,fixed=NULL,optim.control=NULL)
package:stats:::bio7:::summary.aov(object,intercept=FALSE,split,expand.split=TRUE,keep.zero.df=TRUE,...)
package:stats:::bio7:::summary.glm(object,dispersion=NULL,correlation=FALSE,symbolic.cor=FALSE,...)
package:stats:::bio7:::summary.lm(object,correlation=FALSE,symbolic.cor=FALSE,...)
package:stats:::bio7:::summary.manova(object,test=c("Pillai","Wilks","Hotelling-Lawley","Roy"),intercept=FALSE,tol=1e-07,...)
package:stats:::bio7:::summary.stepfun(object,...)
package:stats:::bio7:::supsmu(x,y,wt=rep(1,n),span="cv",periodic=FALSE,bass=0)
package:stats:::bio7:::symnum(x,cutpoints=c(0.3,0.6,0.8,0.9,0.95),symbols=if(numeric.x)c("",".",",","+","*","B")elsec(".","|"),legend=length(symbols)>=3,na="?",eps=1e-05,numeric.x=is.numeric(x),corr=missing(cutpoints)&&numeric.x,show.max=if(corr)"1",show.min=NULL,abbr.colnames=has.colnames,lower.triangular=corr&&is.numeric(x)&&is.matrix(x),diag.lower.tri=corr&&!is.null(show.max))
package:stats:::bio7:::t.test(x,...)
package:stats:::bio7:::termplot(model,data=NULL,envir=environment(formula(model)),partial.resid=FALSE,rug=FALSE,terms=NULL,se=FALSE,xlabs=NULL,ylabs=NULL,main=NULL,col.term=2,lwd.term=1.5,col.se="orange",lty.se=2,lwd.se=1,col.res="gray",cex=1,pch=par("pch"),col.smth="darkred",lty.smth=2,span.smth=2/3,ask=dev.interactive()&&nb.fig<n.tms,use.factor.levels=TRUE,smooth=NULL,ylim="common",plot=TRUE,transform.x=FALSE,...)
package:stats:::bio7:::terms(x,...)
package:stats:::bio7:::terms.formula(x,specials=NULL,abb=NULL,data=NULL,neg.out=TRUE,keep.order=FALSE,simplify=FALSE,...,allowDotAsName=FALSE)
package:stats:::bio7:::time(x,...)
package:stats:::bio7:::toeplitz(x,...)
package:stats:::bio7:::ts(data=NA,start=1,end=numeric(),frequency=1,deltat=1,ts.eps=getOption("ts.eps"),class=if(nseries>1)c("mts","ts","matrix")else"ts",names=if(!is.null(dimnames(data)))colnames(data)elsepaste("Series",seq(nseries)))
package:stats:::bio7:::ts.intersect(...,dframe=FALSE)
package:stats:::bio7:::ts.plot(...,gpars=list())
package:stats:::bio7:::ts.union(...,dframe=FALSE)
package:stats:::bio7:::tsdiag(object,gof.lag,...)
package:stats:::bio7:::tsp(x)
package:stats:::bio7:::tsp<-(x,value)
package:stats:::bio7:::tsSmooth(object,...)
package:stats:::bio7:::TukeyHSD(x,which,ordered=FALSE,conf.level=0.95,...)
package:stats:::bio7:::uniroot(f,interval,...,lower=min(interval),upper=max(interval),f.lower=f(lower,...),f.upper=f(upper,...),extendInt=c("no","yes","downX","upX"),check.conv=FALSE,tol=.Machine$double.eps^0.25,maxiter=1000,trace=0)
package:stats:::bio7:::update(object,...)
package:stats:::bio7:::update.default(object,formula.,...,evaluate=TRUE)
package:stats:::bio7:::update.formula(old,new,...)
package:stats:::bio7:::var(x,y=NULL,na.rm=FALSE,use)
package:stats:::bio7:::var.test(x,...)
package:stats:::bio7:::variable.names(object,...)
package:stats:::bio7:::varimax(x,normalize=TRUE,eps=1e-05)
package:stats:::bio7:::vcov(object,...)
package:stats:::bio7:::weighted.mean(x,w,...)
package:stats:::bio7:::weighted.residuals(obj,drop0=TRUE)
package:stats:::bio7:::weights(object,...)
package:stats:::bio7:::wilcox.test(x,...)
package:stats:::bio7:::window(x,...)
package:stats:::bio7:::window<-(x,...,value)
package:stats:::bio7:::write.ftable(x,file="",quote=TRUE,append=FALSE,digits=getOption("digits"),...)
package:stats:::bio7:::xtabs(formula=~.,data=parent.frame(),subset,sparse=FALSE,na.action,exclude=c(NA,NaN),drop.unused.levels=FALSE)
package:graphics:::bio7:::abline(a=NULL,b=NULL,h=NULL,v=NULL,reg=NULL,coef=NULL,untf=FALSE,...)
package:graphics:::bio7:::arrows(x0,y0,x1=x0,y1=y0,length=0.25,angle=30,code=2,col=par("fg"),lty=par("lty"),lwd=par("lwd"),...)
package:graphics:::bio7:::assocplot(x,col=c("black","red"),space=0.3,main=NULL,xlab=NULL,ylab=NULL)
package:graphics:::bio7:::axis(side,at=NULL,labels=TRUE,tick=TRUE,line=NA,pos=NA,outer=FALSE,font=NA,lty="solid",lwd=1,lwd.ticks=lwd,col=NULL,col.ticks=NULL,hadj=NA,padj=NA,...)
package:graphics:::bio7:::Axis(x=NULL,at=NULL,...,side,labels=NULL)
package:graphics:::bio7:::axis.Date(side,x,at,format,labels=TRUE,...)
package:graphics:::bio7:::axis.POSIXct(side,x,at,format,labels=TRUE,...)
package:graphics:::bio7:::axTicks(side,axp=NULL,usr=NULL,log=NULL,nintLog=NULL)
package:graphics:::bio7:::barplot(height,...)
package:graphics:::bio7:::barplot.default(height,width=1,space=NULL,names.arg=NULL,legend.text=NULL,beside=FALSE,horiz=FALSE,density=NULL,angle=45,col=NULL,border=par("fg"),main=NULL,sub=NULL,xlab=NULL,ylab=NULL,xlim=NULL,ylim=NULL,xpd=TRUE,log="",axes=TRUE,axisnames=TRUE,cex.axis=par("cex.axis"),cex.names=par("cex.axis"),inside=TRUE,plot=TRUE,axis.lty=0,offset=0,add=FALSE,args.legend=NULL,...)
package:graphics:::bio7:::box(which="plot",lty="solid",...)
package:graphics:::bio7:::boxplot(x,...)
package:graphics:::bio7:::boxplot.default(x,...,range=1.5,width=NULL,varwidth=FALSE,notch=FALSE,outline=TRUE,names,plot=TRUE,border=par("fg"),col=NULL,log="",pars=list(boxwex=0.8,staplewex=0.5,outwex=0.5),horizontal=FALSE,add=FALSE,at=NULL)
package:graphics:::bio7:::boxplot.matrix(x,use.cols=TRUE,...)
package:graphics:::bio7:::bxp(z,notch=FALSE,width=NULL,varwidth=FALSE,outline=TRUE,notch.frac=0.5,log="",border=par("fg"),pars=NULL,frame.plot=axes,horizontal=FALSE,add=FALSE,at=NULL,show.names=NULL,...)
package:graphics:::bio7:::cdplot(x,...)
package:graphics:::bio7:::clip(x1,x2,y1,y2)
package:graphics:::bio7:::close.screen(n,all.screens=FALSE)
package:graphics:::bio7:::co.intervals(x,number=6,overlap=0.5)
package:graphics:::bio7:::contour(x,...)
package:graphics:::bio7:::contour.default(x=seq(0,1,length.out=nrow(z)),y=seq(0,1,length.out=ncol(z)),z,nlevels=10,levels=pretty(zlim,nlevels),labels=NULL,xlim=range(x,finite=TRUE),ylim=range(y,finite=TRUE),zlim=range(z,finite=TRUE),labcex=0.6,drawlabels=TRUE,method="flattest",vfont,axes=TRUE,frame.plot=axes,col=par("fg"),lty=par("lty"),lwd=par("lwd"),add=FALSE,...)
package:graphics:::bio7:::coplot(formula,data,given.values,panel=points,rows,columns,show.given=TRUE,col=par("fg"),pch=par("pch"),bar.bg=c(num=gray(0.8),fac=gray(0.95)),xlab=c(x.name,paste("Given:",a.name)),ylab=c(y.name,paste("Given:",b.name)),subscripts=FALSE,axlabels=(f)abbreviate(levels(f)),number=6,overlap=0.5,xlim,ylim,...)
package:graphics:::bio7:::curve(expr,from=NULL,to=NULL,n=101,add=FALSE,type="l",xname="x",xlab=xname,ylab=NULL,log=NULL,xlim=NULL,...)
package:graphics:::bio7:::dotchart(x,labels=NULL,groups=NULL,gdata=NULL,cex=par("cex"),pch=21,gpch=21,bg=par("bg"),color=par("fg"),gcolor=par("fg"),lcolor="gray",xlim=range(x[is.finite(x)]),main=NULL,xlab=NULL,ylab=NULL,...)
package:graphics:::bio7:::erase.screen(n=cur.screen)
package:graphics:::bio7:::filled.contour(x=seq(0,1,length.out=nrow(z)),y=seq(0,1,length.out=ncol(z)),z,xlim=range(x,finite=TRUE),ylim=range(y,finite=TRUE),zlim=range(z,finite=TRUE),levels=pretty(zlim,nlevels),nlevels=20,color.palette=cm.colors,col=color.palette(length(levels)-1),plot.title,plot.axes,key.title,key.axes,asp=NA,xaxs="i",yaxs="i",las=1,axes=TRUE,frame.plot=axes,...)
package:graphics:::bio7:::fourfoldplot(x,color=c("#99CCFF","#6699CC"),conf.level=0.95,std=c("margins","ind.max","all.max"),margin=c(1,2),space=0.2,main=NULL,mfrow=NULL,mfcol=NULL)
package:graphics:::bio7:::frame()
package:graphics:::bio7:::grconvertX(x,from="user",to="user")
package:graphics:::bio7:::grconvertY(y,from="user",to="user")
package:graphics:::bio7:::grid(nx=NULL,ny=nx,col="lightgray",lty="dotted",lwd=par("lwd"),equilogs=TRUE)
package:graphics:::bio7:::hist(x,...)
package:graphics:::bio7:::hist.default(x,breaks="Sturges",freq=NULL,probability=!freq,include.lowest=TRUE,right=TRUE,density=NULL,angle=45,col=NULL,border=NULL,main=paste("Histogramof",xname),xlim=range(breaks),ylim=NULL,xlab=xname,ylab,axes=TRUE,plot=TRUE,labels=FALSE,nclass=NULL,warn.unused=TRUE,...)
package:graphics:::bio7:::identify(x,...)
package:graphics:::bio7:::image(x,...)
package:graphics:::bio7:::image.default(x=seq(0,1,length.out=nrow(z)),y=seq(0,1,length.out=ncol(z)),z,zlim=range(z[is.finite(z)]),xlim=range(x),ylim=range(y),col=heat.colors(12),add=FALSE,xaxs="i",yaxs="i",xlab,ylab,breaks,oldstyle=FALSE,useRaster,...)
package:graphics:::bio7:::layout(mat,widths=rep.int(1,ncol(mat)),heights=rep.int(1,nrow(mat)),respect=FALSE)
package:graphics:::bio7:::layout.show(n=1)
package:graphics:::bio7:::lcm(x)
package:graphics:::bio7:::legend(x,y=NULL,legend,fill=NULL,col=par("col"),border="black",lty,lwd,pch,angle=45,density=NULL,bty="o",bg=par("bg"),box.lwd=par("lwd"),box.lty=par("lty"),box.col=par("fg"),pt.bg=NA,cex=1,pt.cex=cex,pt.lwd=lwd,xjust=0,yjust=1,x.intersp=1,y.intersp=1,adj=c(0,0.5),text.width=NULL,text.col=par("col"),text.font=NULL,merge=do.lines&&has.pch,trace=FALSE,plot=TRUE,ncol=1,horiz=FALSE,title=NULL,inset=0,xpd,title.col=text.col,title.adj=0.5,seg.len=2)
package:graphics:::bio7:::lines(x,...)
package:graphics:::bio7:::lines.default(x,y=NULL,type="l",...)
package:graphics:::bio7:::locator(n=512,type="n",...)
package:graphics:::bio7:::matlines(x,y,type="l",lty=1:5,lwd=1,pch=NULL,col=1:6,...)
package:graphics:::bio7:::matplot(x,y,type="p",lty=1:5,lwd=1,lend=par("lend"),pch=NULL,col=1:6,cex=NULL,bg=NA,xlab=NULL,ylab=NULL,xlim=NULL,ylim=NULL,...,add=FALSE,verbose=getOption("verbose"))
package:graphics:::bio7:::matpoints(x,y,type="p",lty=1:5,lwd=1,pch=NULL,col=1:6,...)
package:graphics:::bio7:::mosaicplot(x,...)
package:graphics:::bio7:::mtext(text,side=3,line=0,outer=FALSE,at=NA,adj=NA,padj=NA,cex=NA,col=NA,font=NA,...)
package:graphics:::bio7:::pairs(x,...)
package:graphics:::bio7:::pairs.default(x,labels,panel=points,...,lower.panel=panel,upper.panel=panel,diag.panel=NULL,text.panel=textPanel,label.pos=0.5+has.diag/3,line.main=3,cex.labels=NULL,font.labels=1,row1attop=TRUE,gap=1,log="")
package:graphics:::bio7:::panel.smooth(x,y,col=par("col"),bg=NA,pch=par("pch"),cex=1,col.smooth="red",span=2/3,iter=3,...)
package:graphics:::bio7:::par(...,no.readonly=FALSE)
package:graphics:::bio7:::persp(x,...)
package:graphics:::bio7:::pie(x,labels=names(x),edges=200,radius=0.8,clockwise=FALSE,init.angle=if(clockwise)90else0,density=NULL,angle=45,col=NULL,border=NULL,lty=NULL,main=NULL,...)
package:graphics:::bio7:::plot(x,y,...)
package:graphics:::bio7:::plot.default(x,y=NULL,type="p",xlim=NULL,ylim=NULL,log="",main=NULL,sub=NULL,xlab=NULL,ylab=NULL,ann=par("ann"),axes=TRUE,frame.plot=axes,panel.first=NULL,panel.last=NULL,asp=NA,...)
package:graphics:::bio7:::plot.design(x,y=NULL,fun=mean,data=NULL,...,ylim=NULL,xlab="Factors",ylab=NULL,main=NULL,ask=NULL,xaxt=par("xaxt"),axes=TRUE,xtick=FALSE)
package:graphics:::bio7:::plot.function(x,y=0,to=1,from=y,xlim=NULL,ylab=NULL,...)
package:graphics:::bio7:::plot.new()
package:graphics:::bio7:::plot.window(xlim,ylim,log="",asp=NA,...)
package:graphics:::bio7:::plot.xy(xy,type,pch=par("pch"),lty=par("lty"),col=par("col"),bg=NA,cex=1,lwd=par("lwd"),...)
package:graphics:::bio7:::points(x,...)
package:graphics:::bio7:::points.default(x,y=NULL,type="p",...)
package:graphics:::bio7:::polygon(x,y=NULL,density=NULL,angle=45,border=NULL,col=NA,lty=par("lty"),...,fillOddEven=FALSE)
package:graphics:::bio7:::polypath(x,y=NULL,border=NULL,col=NA,lty=par("lty"),rule="winding",...)
package:graphics:::bio7:::rasterImage(image,xleft,ybottom,xright,ytop,angle=0,interpolate=TRUE,...)
package:graphics:::bio7:::rect(xleft,ybottom,xright,ytop,density=NULL,angle=45,col=NA,border=NULL,lty=par("lty"),lwd=par("lwd"),...)
package:graphics:::bio7:::rug(x,ticksize=0.03,side=1,lwd=0.5,col=par("fg"),quiet=getOption("warn")<0,...)
package:graphics:::bio7:::screen(n=cur.screen,new=TRUE)
package:graphics:::bio7:::segments(x0,y0,x1=x0,y1=y0,col=par("fg"),lty=par("lty"),lwd=par("lwd"),...)
package:graphics:::bio7:::smoothScatter(x,y=NULL,nbin=128,bandwidth,colramp=colorRampPalette(c("white",blues9)),nrpoints=100,pch=".",cex=1,col="black",transformation=(x)x^0.25,postPlotHook=box,xlab=NULL,ylab=NULL,xlim,ylim,xaxs=par("xaxs"),yaxs=par("yaxs"),...)
package:graphics:::bio7:::spineplot(x,...)
package:graphics:::bio7:::split.screen(figs,screen,erase=TRUE)
package:graphics:::bio7:::stars(x,full=TRUE,scale=TRUE,radius=TRUE,labels=dimnames(x)[[1]],locations=NULL,nrow=NULL,ncol=NULL,len=1,key.loc=NULL,key.labels=dimnames(x)[[2]],key.xpd=TRUE,xlim=NULL,ylim=NULL,flip.labels=NULL,draw.segments=FALSE,col.segments=1:n.seg,col.stars=NA,col.lines=NA,axes=FALSE,frame.plot=axes,main=NULL,sub=NULL,xlab="",ylab="",cex=0.8,lwd=0.25,lty=par("lty"),xpd=FALSE,mar=pmin(par("mar"),1.1+c(2*axes+(xlab!=""),2*axes+(ylab!=""),1,0)),add=FALSE,plot=TRUE,...)
package:graphics:::bio7:::stem(x,scale=1,width=80,atom=1e-08)
package:graphics:::bio7:::strheight(s,units="user",cex=NULL,font=NULL,vfont=NULL,...)
package:graphics:::bio7:::stripchart(x,...)
package:graphics:::bio7:::strwidth(s,units="user",cex=NULL,font=NULL,vfont=NULL,...)
package:graphics:::bio7:::sunflowerplot(x,...)
package:graphics:::bio7:::symbols(x,y=NULL,circles,squares,rectangles,stars,thermometers,boxplots,inches=TRUE,add=FALSE,fg=par("col"),bg=NA,xlab=NULL,ylab=NULL,main=NULL,xlim=NULL,ylim=NULL,...)
package:graphics:::bio7:::text(x,...)
package:graphics:::bio7:::text.default(x,y=NULL,labels=seq_along(x),adj=NULL,pos=NULL,offset=0.5,vfont=NULL,cex=1,col=NULL,font=NULL,...)
package:graphics:::bio7:::title(main=NULL,sub=NULL,xlab=NULL,ylab=NULL,line=NA,outer=FALSE,...)
package:graphics:::bio7:::xinch(x=1,warn.log=TRUE)
package:graphics:::bio7:::xspline(x,y=NULL,shape=0,open=TRUE,repEnds=TRUE,draw=TRUE,border=par("fg"),col=NA,...)
package:graphics:::bio7:::xyinch(xy=1,warn.log=TRUE)
package:graphics:::bio7:::yinch(y=1,warn.log=TRUE)
package:grDevices:::bio7:::adjustcolor(col,alpha.f=1,red.f=1,green.f=1,blue.f=1,offset=c(0,0,0,0),transform=diag(c(red.f,green.f,blue.f,alpha.f)))
package:grDevices:::bio7:::as.graphicsAnnot(x)
package:grDevices:::bio7:::as.raster(x,...)
package:grDevices:::bio7:::axisTicks(usr,log,axp=NULL,nint=5)
package:grDevices:::bio7:::bitmap(file,type="png16m",height=7,width=7,res=72,units="in",pointsize,taa=NA,gaa=NA,...)
package:grDevices:::bio7:::blues9NA
package:grDevices:::bio7:::bmp(filename="Rplot%03d.bmp",width=480,height=480,units="px",pointsize=12,bg="white",res=NA,family="sans",restoreConsole=TRUE,type=c("windows","cairo"),antialias=c("default","none","cleartype","gray","subpixel"))
package:grDevices:::bio7:::boxplot.stats(x,coef=1.5,do.conf=TRUE,do.out=TRUE)
package:grDevices:::bio7:::bringToTop(which=dev.cur(),stay=FALSE)
package:grDevices:::bio7:::cairo_pdf(filename=if(onefile)"Rplots.pdf"else"Rplot%03d.pdf",width=7,height=7,pointsize=12,onefile=FALSE,family="sans",bg="white",antialias=c("default","none","gray","subpixel"))
package:grDevices:::bio7:::cairo_ps(filename=if(onefile)"Rplots.ps"else"Rplot%03d.ps",width=7,height=7,pointsize=12,onefile=FALSE,family="sans",bg="white",antialias=c("default","none","gray","subpixel"))
package:grDevices:::bio7:::check.options(new,name.opt,reset=FALSE,assign.opt=FALSE,envir=.GlobalEnv,check.attributes=c("mode","length"),override.check=FALSE)
package:grDevices:::bio7:::chull(x,y=NULL)
package:grDevices:::bio7:::CIDFont(family,cmap,cmapEncoding,pdfresource="")
package:grDevices:::bio7:::cm(x)
package:grDevices:::bio7:::cm.colors(n,alpha=1)
package:grDevices:::bio7:::col2rgb(col,alpha=FALSE)
package:grDevices:::bio7:::colorConverter(toXYZ,fromXYZ,name,white=NULL)
package:grDevices:::bio7:::colorRamp(colors,bias=1,space=c("rgb","Lab"),interpolate=c("linear","spline"),alpha=FALSE)
package:grDevices:::bio7:::colorRampPalette(colors,...)
package:grDevices:::bio7:::colors(distinct=FALSE)
package:grDevices:::bio7:::colorspacesNA
package:grDevices:::bio7:::colours(distinct=FALSE)
package:grDevices:::bio7:::contourLines(x=seq(0,1,length.out=nrow(z)),y=seq(0,1,length.out=ncol(z)),z,nlevels=10,levels=pretty(range(z,na.rm=TRUE),nlevels))
package:grDevices:::bio7:::convertColor(color,from,to,from.ref.white=NULL,to.ref.white=NULL,scale.in=1,scale.out=1,clip=TRUE)
package:grDevices:::bio7:::densCols(x,y=NULL,nbin=128,bandwidth,colramp=colorRampPalette(blues9[-(1:3)]))
package:grDevices:::bio7:::dev.capabilities(what=NULL)
package:grDevices:::bio7:::dev.capture(native=FALSE)
package:grDevices:::bio7:::dev.control(displaylist=c("inhibit","enable"))
package:grDevices:::bio7:::dev.copy(device,...,which=dev.next())
package:grDevices:::bio7:::dev.copy2eps(...)
package:grDevices:::bio7:::dev.copy2pdf(...,out.type="pdf")
package:grDevices:::bio7:::dev.cur()
package:grDevices:::bio7:::dev.flush(level=1)
package:grDevices:::bio7:::dev.hold(level=1)
package:grDevices:::bio7:::dev.interactive(orNone=FALSE)
package:grDevices:::bio7:::dev.list()
package:grDevices:::bio7:::dev.new(...,noRStudioGD=FALSE)
package:grDevices:::bio7:::dev.next(which=dev.cur())
package:grDevices:::bio7:::dev.off(which=dev.cur())
package:grDevices:::bio7:::dev.prev(which=dev.cur())
package:grDevices:::bio7:::dev.print(device=postscript,...)
package:grDevices:::bio7:::dev.set(which=dev.next())
package:grDevices:::bio7:::dev.size(units=c("in","cm","px"))
package:grDevices:::bio7:::dev2bitmap(file,type="png16m",height=7,width=7,res=72,units="in",pointsize,...,method=c("postscript","pdf"),taa=NA,gaa=NA)
package:grDevices:::bio7:::devAskNewPage(ask=NULL)
package:grDevices:::bio7:::deviceIsInteractive(name=NULL)
package:grDevices:::bio7:::embedFonts(file,format,outfile=file,fontpaths=character(),options="")
package:grDevices:::bio7:::extendrange(x,r=range(x,na.rm=TRUE),f=0.05)
package:grDevices:::bio7:::getGraphicsEvent(prompt="Waitingforinput",onMouseDown=NULL,onMouseMove=NULL,onMouseUp=NULL,onKeybd=NULL,consolePrompt=prompt)
package:grDevices:::bio7:::getGraphicsEventEnv(which=dev.cur())
package:grDevices:::bio7:::graphics.off()
package:grDevices:::bio7:::gray(level,alpha=NULL)
package:grDevices:::bio7:::gray.colors(n,start=0.3,end=0.9,gamma=2.2,alpha=NULL)
package:grDevices:::bio7:::grey(level,alpha=NULL)
package:grDevices:::bio7:::grey.colors(n,start=0.3,end=0.9,gamma=2.2,alpha=NULL)
package:grDevices:::bio7:::hcl(h=0,c=35,l=85,alpha=1,fixup=TRUE)
package:grDevices:::bio7:::heat.colors(n,alpha=1)
package:grDevices:::bio7:::HersheyNA
package:grDevices:::bio7:::hsv(h=1,s=1,v=1,alpha=1)
package:grDevices:::bio7:::is.raster(x)
package:grDevices:::bio7:::jpeg(filename="Rplot%03d.jpg",width=480,height=480,units="px",pointsize=12,quality=75,bg="white",res=NA,family="sans",restoreConsole=TRUE,type=c("windows","cairo"),antialias=c("default","none","cleartype","gray","subpixel"))
package:grDevices:::bio7:::make.rgb(red,green,blue,name=NULL,white="D65",gamma=2.2)
package:grDevices:::bio7:::msgWindow(type=c("minimize","restore","maximize","hide","recordOn","recordOff"),which=dev.cur())
package:grDevices:::bio7:::n2mfrow(nr.plots)
package:grDevices:::bio7:::nclass.FD(x)
package:grDevices:::bio7:::nclass.scott(x)
package:grDevices:::bio7:::nclass.Sturges(x)
package:grDevices:::bio7:::palette(value)
package:grDevices:::bio7:::pdf(file=ifelse(onefile,"Rplots.pdf","Rplot%03d.pdf"),width,height,onefile,family,title,fonts,version,paper,encoding,bg,fg,pointsize,pagecentre,colormodel,useDingbats,useKerning,fillOddEven,compress)
package:grDevices:::bio7:::pdf.options(...,reset=FALSE)
package:grDevices:::bio7:::pdfFonts(...)
package:grDevices:::bio7:::pictex(file="Rplots.tex",width=5,height=4,debug=FALSE,bg="white",fg="black")
package:grDevices:::bio7:::png(filename="Rplot%03d.png",width=480,height=480,units="px",pointsize=12,bg="white",res=NA,family="sans",restoreConsole=TRUE,type=c("windows","cairo","cairo-png"),antialias=c("default","none","cleartype","gray","subpixel"))
package:grDevices:::bio7:::postscript(file=ifelse(onefile,"Rplots.ps","Rplot%03d.ps"),onefile,family,title,fonts,encoding,bg,fg,width,height,horizontal,pointsize,paper,pagecentre,print.it,command,colormodel,useKerning,fillOddEven)
package:grDevices:::bio7:::postscriptFonts(...)
package:grDevices:::bio7:::ps.options(...,reset=FALSE,override.check=FALSE)
package:grDevices:::bio7:::rainbow(n,s=1,v=1,start=0,end=max(1,n-1)/n,alpha=1)
package:grDevices:::bio7:::recordGraphics(expr,list,env)
package:grDevices:::bio7:::recordPlot()
package:grDevices:::bio7:::replayPlot(x)
package:grDevices:::bio7:::rgb(red,green,blue,alpha,names=NULL,maxColorValue=1)
package:grDevices:::bio7:::rgb2hsv(r,g=NULL,b=NULL,maxColorValue=255)
package:grDevices:::bio7:::savePlot(filename="Rplot",type=c("wmf","emf","png","jpg","jpeg","bmp","tif","tiff","ps","eps","pdf"),device=dev.cur(),restoreConsole=TRUE)
package:grDevices:::bio7:::setEPS(...)
package:grDevices:::bio7:::setGraphicsEventEnv(which=dev.cur(),env)
package:grDevices:::bio7:::setGraphicsEventHandlers(which=dev.cur(),...)
package:grDevices:::bio7:::setPS(...)
package:grDevices:::bio7:::svg(filename=if(onefile)"Rplots.svg"else"Rplot%03d.svg",width=7,height=7,pointsize=12,onefile=FALSE,family="sans",bg="white",antialias=c("default","none","gray","subpixel"))
package:grDevices:::bio7:::terrain.colors(n,alpha=1)
package:grDevices:::bio7:::tiff(filename="Rplot%03d.tif",width=480,height=480,units="px",pointsize=12,compression=c("none","rle","lzw","jpeg","zip","lzw+p","zip+p"),bg="white",res=NA,family="sans",restoreConsole=TRUE,type=c("windows","cairo"),antialias=c("default","none","cleartype","gray","subpixel"))
package:grDevices:::bio7:::topo.colors(n,alpha=1)
package:grDevices:::bio7:::trans3d(x,y,z,pmat)
package:grDevices:::bio7:::Type1Font(family,metrics,encoding="default")
package:grDevices:::bio7:::win.graph(width,height,pointsize)
package:grDevices:::bio7:::win.metafile(filename="",width=7,height=7,pointsize=12,family="",restoreConsole=TRUE)
package:grDevices:::bio7:::win.print(width=7,height=7,pointsize=12,printer="",family="",antialias="default",restoreConsole=TRUE)
package:grDevices:::bio7:::windows(width,height,pointsize,record,rescale,xpinch,ypinch,bg,canvas,gamma,xpos,ypos,buffered,title,restoreConsole,clickToConfirm,fillOddEven,family="",antialias)
package:grDevices:::bio7:::windows.options(...,reset=FALSE)
package:grDevices:::bio7:::windowsFont(family)
package:grDevices:::bio7:::windowsFonts(...)
package:grDevices:::bio7:::x11(width,height,pointsize,bg,gamma,xpos,ypos,title)
package:grDevices:::bio7:::X11(width,height,pointsize,bg,gamma,xpos,ypos,title)
package:grDevices:::bio7:::xfig(file=ifelse(onefile,"Rplots.fig","Rplot%03d.fig"),onefile=FALSE,encoding="none",paper="default",horizontal=TRUE,width=0,height=0,family="Helvetica",pointsize=12,bg="transparent",fg="black",pagecentre=TRUE,defaultfont=FALSE,textspecial=FALSE)
package:grDevices:::bio7:::xy.coords(x,y=NULL,xlab=NULL,ylab=NULL,log=NULL,recycle=FALSE)
package:grDevices:::bio7:::xyTable(x,y=NULL,digits)
package:grDevices:::bio7:::xyz.coords(x,y=NULL,z=NULL,xlab=NULL,ylab=NULL,zlab=NULL,log=NULL,recycle=FALSE)
package:utils:::bio7:::?(e1,e2)
package:utils:::bio7:::adist(x,y=NULL,costs=NULL,counts=FALSE,fixed=TRUE,partial=!fixed,ignore.case=FALSE,useBytes=FALSE)
package:utils:::bio7:::alarm()
package:utils:::bio7:::apropos(what,where=FALSE,ignore.case=TRUE,mode="any")
package:utils:::bio7:::aregexec(pattern,text,max.distance=0.1,costs=NULL,ignore.case=FALSE,fixed=FALSE,useBytes=FALSE)
package:utils:::bio7:::argsAnywhere(x)
package:utils:::bio7:::arrangeWindows(action=c("vertical","horizontal","cascade","minimize","restore"),windows,preserve=TRUE,outer=FALSE)
package:utils:::bio7:::as.person(x)
package:utils:::bio7:::as.personList(x)
package:utils:::bio7:::as.relistable(x)
package:utils:::bio7:::as.roman(x)
package:utils:::bio7:::aspell(files,filter,control=list(),encoding="unknown",program=NULL,dictionaries=character())
package:utils:::bio7:::aspell_package_C_files(dir,ignore=character(),control=list(),program=NULL,dictionaries=character())
package:utils:::bio7:::aspell_package_R_files(dir,ignore=character(),control=list(),program=NULL,dictionaries=character())
package:utils:::bio7:::aspell_package_Rd_files(dir,drop=c("\\author","\\references"),control=list(),program=NULL,dictionaries=character())
package:utils:::bio7:::aspell_package_vignettes(dir,control=list(),program=NULL,dictionaries=character())
package:utils:::bio7:::aspell_write_personal_dictionary_file(x,out,language="en",program=NULL)
package:utils:::bio7:::assignInMyNamespace(x,value)
package:utils:::bio7:::assignInNamespace(x,value,ns,pos=-1,envir=as.environment(pos))
package:utils:::bio7:::available.packages(contriburl=contrib.url(getOption("repos"),type),method,fields=NULL,type=getOption("pkgType"),filters=NULL)
package:utils:::bio7:::bibentry(bibtype,textVersion=NULL,header=NULL,footer=NULL,key=NULL,...,other=list(),mheader=NULL,mfooter=NULL)
package:utils:::bio7:::browseEnv(envir=.GlobalEnv,pattern,excludepatt="^last\\.warning",html=.Platform$GUI!="AQUA",expanded=TRUE,properties=NULL,main=NULL,debugMe=FALSE)
package:utils:::bio7:::browseURL(url,browser=getOption("browser"),encodeIfNeeded=FALSE)
package:utils:::bio7:::browseVignettes(package=NULL,lib.loc=NULL,all=TRUE)
package:utils:::bio7:::bug.report(subject="",address,file="R.bug.report",package=NULL,lib.loc=NULL,...)
package:utils:::bio7:::capture.output(...,file=NULL,append=FALSE)
package:utils:::bio7:::changedFiles(before,after,path=before$path,timestamp=before$timestamp,check.file.info=c("size","isdir","mode","mtime"),md5sum=before$md5sum,digest=before$digest,full.names=before$full.names,...)
package:utils:::bio7:::checkCRAN(method)
package:utils:::bio7:::choose.dir(default="",caption="Selectfolder")
package:utils:::bio7:::choose.files(default="",caption="Selectfiles",multi=TRUE,filters=Filters,index=nrow(Filters))
package:utils:::bio7:::chooseBioCmirror(graphics=getOption("menu.graphics"),ind=NULL)
package:utils:::bio7:::chooseCRANmirror(graphics=getOption("menu.graphics"),ind=NULL)
package:utils:::bio7:::citation(package="base",lib.loc=NULL,auto=NULL)
package:utils:::bio7:::cite(keys,bib,...)
package:utils:::bio7:::citeNatbib(keys,bib,textual=FALSE,before=NULL,after=NULL,mode=c("authoryear","numbers","super"),abbreviate=TRUE,longnamesfirst=TRUE,bibpunct=c("(",")",";","a","",","),previous)
package:utils:::bio7:::citEntry(entry,textVersion,header=NULL,footer=NULL,...)
package:utils:::bio7:::citFooter(...)
package:utils:::bio7:::citHeader(...)
package:utils:::bio7:::close.socket(socket,...)
package:utils:::bio7:::combn(x,m,FUN=NULL,simplify=TRUE,...)
package:utils:::bio7:::compareVersion(a,b)
package:utils:::bio7:::contrib.url(repos,type=getOption("pkgType"))
package:utils:::bio7:::count.fields(file,sep="",quote="\"'",skip=0,blank.lines.skip=TRUE,comment.char="#")
package:utils:::bio7:::CRAN.packages(CRAN=getOption("repos"),method,contriburl=contrib.url(CRAN))
package:utils:::bio7:::create.post(instructions=character(),description="post",subject="",method=getOption("mailer"),address="therelevantmailinglist",ccaddress=getOption("ccaddress",""),filename="R.post",info=character())
package:utils:::bio7:::data(...,list=character(),package=NULL,lib.loc=NULL,verbose=getOption("verbose"),envir=.GlobalEnv)
package:utils:::bio7:::data.entry(...,Modes=NULL,Names=NULL)
package:utils:::bio7:::dataentry(data,modes)
package:utils:::bio7:::de(...,Modes=list(),Names=NULL)
package:utils:::bio7:::de.ncols(inlist)
package:utils:::bio7:::de.restore(inlist,ncols,coltypes,argnames,args)
package:utils:::bio7:::de.setup(ilist,list.names,incols)
package:utils:::bio7:::debugger(dump=last.dump)
package:utils:::bio7:::demo(topic,package=NULL,lib.loc=NULL,character.only=FALSE,verbose=getOption("verbose"),echo=TRUE,ask=getOption("demo.ask"),encoding=getOption("encoding"))
package:utils:::bio7:::DLL.version(path)
package:utils:::bio7:::download.file(url,destfile,method,quiet=FALSE,mode="w",cacheOK=TRUE,extra=getOption("download.file.extra"))
package:utils:::bio7:::download.packages(pkgs,destdir,available=NULL,repos=getOption("repos"),contriburl=contrib.url(repos,type),method,type=getOption("pkgType"),...)
package:utils:::bio7:::dump.frames(dumpto="last.dump",to.file=FALSE)
package:utils:::bio7:::edit(name,...)
package:utils:::bio7:::emacs(name=NULL,file="")
package:utils:::bio7:::example(topic,package=NULL,lib.loc=NULL,character.only=FALSE,give.lines=FALSE,local=FALSE,echo=TRUE,verbose=getOption("verbose"),setRNG=FALSE,ask=getOption("example.ask"),prompt.prefix=abbreviate(topic,6),run.dontrun=FALSE)
package:utils:::bio7:::file.edit(...,title=file,editor=getOption("editor"),fileEncoding="")
package:utils:::bio7:::file_test(op,x,y)
package:utils:::bio7:::fileSnapshot(path=".",file.info=TRUE,timestamp=NULL,md5sum=FALSE,digest=NULL,full.names=length(path)>1,...)
package:utils:::bio7:::FiltersNA
package:utils:::bio7:::find(what,mode="any",numeric=FALSE,simple.words=TRUE)
package:utils:::bio7:::findLineNum(srcfile,line,nameonly=TRUE,envir=parent.frame(),lastenv)
package:utils:::bio7:::fix(x,...)
package:utils:::bio7:::fixInNamespace(x,ns,pos=-1,envir=as.environment(pos),...)
package:utils:::bio7:::flush.console()
package:utils:::bio7:::formatOL(x,type="arabic",offset=0,start=1,width=0.9*getOption("width"))
package:utils:::bio7:::formatUL(x,label="*",offset=0,width=0.9*getOption("width"))
package:utils:::bio7:::getAnywhere(x)
package:utils:::bio7:::getClipboardFormats(numeric=FALSE)
package:utils:::bio7:::getCRANmirrors(all=FALSE,local.only=FALSE)
package:utils:::bio7:::getFromNamespace(x,ns,pos=-1,envir=as.environment(pos))
package:utils:::bio7:::getIdentification()
package:utils:::bio7:::getParseData(x,includeText=NA)
package:utils:::bio7:::getParseText(parseData,id)
package:utils:::bio7:::getS3method(f,class,optional=FALSE)
package:utils:::bio7:::getSrcDirectory(x,unique=TRUE)
package:utils:::bio7:::getSrcFilename(x,full.names=FALSE,unique=TRUE)
package:utils:::bio7:::getSrcLocation(x,which=c("line","column","byte","parse"),first=TRUE)
package:utils:::bio7:::getSrcref(x)
package:utils:::bio7:::getTxtProgressBar(pb)
package:utils:::bio7:::getWindowsHandle(which="Console")
package:utils:::bio7:::getWindowsHandles(which="R",pattern="",minimized=FALSE)
package:utils:::bio7:::getWindowTitle()
package:utils:::bio7:::getWinProgressBar(pb)
package:utils:::bio7:::glob2rx(pattern,trim.head=FALSE,trim.tail=TRUE)
package:utils:::bio7:::globalVariables(names,package,add=TRUE)
package:utils:::bio7:::head(x,...)
package:utils:::bio7:::head.matrix(x,n=6,...)
package:utils:::bio7:::help(topic,package=NULL,lib.loc=NULL,verbose=getOption("verbose"),try.all.packages=getOption("help.try.all.packages"),help_type=getOption("help_type"))
package:utils:::bio7:::help.request(subject="",address="r-help@R-project.org",file="R.help.request",...)
package:utils:::bio7:::help.search(pattern,fields=c("alias","concept","title"),apropos,keyword,whatis,ignore.case=TRUE,package=NULL,lib.loc=NULL,help.db=getOption("help.db"),verbose=getOption("verbose"),rebuild=FALSE,agrep=NULL,use_UTF8=FALSE,types=getOption("help.search.types"))
package:utils:::bio7:::help.start(update=FALSE,gui="irrelevant",browser=getOption("browser"),remote=NULL)
package:utils:::bio7:::history(max.show=25,reverse=FALSE,pattern,...)
package:utils:::bio7:::install.packages(pkgs,lib,repos=getOption("repos"),contriburl=contrib.url(repos,type),method,available=NULL,destdir=NULL,dependencies=NA,type=getOption("pkgType"),configure.args=getOption("configure.args"),configure.vars=getOption("configure.vars"),clean=FALSE,Ncpus=getOption("Ncpus",1),verbose=getOption("verbose"),libs_only=FALSE,INSTALL_opts,quiet=FALSE,keep_outputs=FALSE,...)
package:utils:::bio7:::installed.packages(lib.loc=NULL,priority=NULL,noCache=FALSE,fields=NULL,subarch=.Platform$r_arch)
package:utils:::bio7:::is.relistable(x)
package:utils:::bio7:::limitedLabels(value,maxwidth=getOption("width")-5)
package:utils:::bio7:::loadhistory(file=".Rhistory")
package:utils:::bio7:::loadRconsole(file=choose.files(file.path(Sys.getenv("R_USER"),"Rconsole")))
package:utils:::bio7:::localeToCharset(locale=Sys.getlocale("LC_CTYPE"))
package:utils:::bio7:::ls.str(pos=-1,name,envir,all.names=FALSE,pattern,mode="any")
package:utils:::bio7:::lsf.str(pos=-1,envir,...)
package:utils:::bio7:::maintainer(pkg)
package:utils:::bio7:::make.packages.html(lib.loc=.libPaths(),temp=FALSE,verbose=TRUE,docdir=R.home("doc"))
package:utils:::bio7:::make.socket(host="localhost",port,fail=TRUE,server=FALSE)
package:utils:::bio7:::makeRweaveLatexCodeRunner(evalFunc=RweaveEvalWithOpt)
package:utils:::bio7:::memory.limit(size=NA)
package:utils:::bio7:::memory.size(max=FALSE)
package:utils:::bio7:::menu(choices,graphics=FALSE,title=NULL)
package:utils:::bio7:::methods(generic.,class)
package:utils:::bio7:::mirror2html(mirrors=NULL,file="mirrors.html",head="mirrors-head.html",foot="mirrors-foot.html")
package:utils:::bio7:::modifyList(x,val,keep.null=FALSE)
package:utils:::bio7:::new.packages(lib.loc=NULL,repos=getOption("repos"),contriburl=contrib.url(repos,type),instPkgs=installed.packages(lib.loc=lib.loc),method,available=NULL,ask=FALSE,...,type=getOption("pkgType"))
package:utils:::bio7:::news(query,package="R",lib.loc=NULL,format=NULL,reader=NULL,db=NULL)
package:utils:::bio7:::object.size(x)
package:utils:::bio7:::old.packages(lib.loc=NULL,repos=getOption("repos"),contriburl=contrib.url(repos,type),instPkgs=installed.packages(lib.loc=lib.loc),method,available=NULL,checkBuilt=FALSE,type=getOption("pkgType"))
package:utils:::bio7:::package.skeleton(name="anRpackage",list=character(),environment=.GlobalEnv,path=".",force=FALSE,code_files=character())
package:utils:::bio7:::packageDescription(pkg,lib.loc=NULL,fields=NULL,drop=TRUE,encoding="")
package:utils:::bio7:::packageName(env=parent.frame())
package:utils:::bio7:::packageStatus(lib.loc=NULL,repositories=NULL,method,type=getOption("pkgType"))
package:utils:::bio7:::packageVersion(pkg,lib.loc=NULL)
package:utils:::bio7:::page(x,method=c("dput","print"),...)
package:utils:::bio7:::person(given=NULL,family=NULL,middle=NULL,email=NULL,role=NULL,comment=NULL,first=NULL,last=NULL)
package:utils:::bio7:::personList(...)
package:utils:::bio7:::pico(name=NULL,file="")
package:utils:::bio7:::process.events()
package:utils:::bio7:::prompt(object,filename=NULL,name=NULL,...)
package:utils:::bio7:::promptData(object,filename=NULL,name=NULL)
package:utils:::bio7:::promptImport(object,filename=NULL,name=NULL,importedFrom=NULL,importPage=name,...)
package:utils:::bio7:::promptPackage(package,lib.loc=NULL,filename=NULL,name=NULL,final=FALSE)
package:utils:::bio7:::rc.getOption(name)
package:utils:::bio7:::rc.options(...)
package:utils:::bio7:::rc.settings(ops,ns,args,func,ipck,S3,data,help,argdb,fuzzy,quotes,files)
package:utils:::bio7:::rc.status()
package:utils:::bio7:::read.csv(file,header=TRUE,sep=",",quote="\"",dec=".",fill=TRUE,comment.char="",...)
package:utils:::bio7:::read.csv2(file,header=TRUE,sep=";",quote="\"",dec=",",fill=TRUE,comment.char="",...)
package:utils:::bio7:::read.delim(file,header=TRUE,sep="\t",quote="\"",dec=".",fill=TRUE,comment.char="",...)
package:utils:::bio7:::read.delim2(file,header=TRUE,sep="\t",quote="\"",dec=",",fill=TRUE,comment.char="",...)
package:utils:::bio7:::read.DIF(file,header=FALSE,dec=".",numerals=c("allow.loss","warn.loss","no.loss"),row.names,col.names,as.is=!stringsAsFactors,na.strings="NA",colClasses=NA,nrows=-1,skip=0,check.names=TRUE,blank.lines.skip=TRUE,stringsAsFactors=default.stringsAsFactors(),transpose=FALSE)
package:utils:::bio7:::read.fortran(file,format,...,as.is=TRUE,colClasses=NA)
package:utils:::bio7:::read.fwf(file,widths,header=FALSE,sep="\t",skip=0,row.names,col.names,n=-1,buffersize=2000,...)
package:utils:::bio7:::read.socket(socket,maxlen=256,loop=FALSE)
package:utils:::bio7:::read.table(file,header=FALSE,sep="",quote="\"'",dec=".",numerals=c("allow.loss","warn.loss","no.loss"),row.names,col.names,as.is=!stringsAsFactors,na.strings="NA",colClasses=NA,nrows=-1,skip=0,check.names=TRUE,fill=!blank.lines.skip,strip.white=FALSE,blank.lines.skip=TRUE,comment.char="#",allowEscapes=FALSE,flush=FALSE,stringsAsFactors=default.stringsAsFactors(),fileEncoding="",encoding="unknown",text,skipNul=FALSE)
package:utils:::bio7:::readCitationFile(file,meta=NULL)
package:utils:::bio7:::readClipboard(format=1,raw=FALSE)
package:utils:::bio7:::readRegistry(key,hive=c("HLM","HCR","HCU","HU","HCC","HPD"),maxdepth=1,view=c("default","32-bit","64-bit"))
package:utils:::bio7:::recover()
package:utils:::bio7:::relist(flesh,skeleton=attr(flesh,"skeleton"))
package:utils:::bio7:::remove.packages(pkgs,lib)
package:utils:::bio7:::removeSource(fn)
package:utils:::bio7:::Rprof(filename="Rprof.out",append=FALSE,interval=0.02,memory.profiling=FALSE,gc.profiling=FALSE,line.profiling=FALSE,numfiles=100,bufsize=10000)
package:utils:::bio7:::Rprofmem(filename="Rprofmem.out",append=FALSE,threshold=0)
package:utils:::bio7:::RShowDoc(what,type=c("pdf","html","txt"),package)
package:utils:::bio7:::RSiteSearch(string,restrict=c("s","vignettes","views"),format=c("normal","short"),sortby=c("score","date:late","date:early","subject","subject:descending","from","from:descending","size","size:descending"),matchesPerPage=20)
package:utils:::bio7:::rtags(path=".",pattern="\\.[RrSs]$",recursive=FALSE,src=list.files(path=path,pattern=pattern,full.names=TRUE,recursive=recursive),keep.re=NULL,ofile="",append=FALSE,verbose=getOption("verbose"))
package:utils:::bio7:::Rtangle()
package:utils:::bio7:::RtangleSetup(file,syntax,output=NULL,annotate=TRUE,split=FALSE,quiet=FALSE,...)
package:utils:::bio7:::RtangleWritedoc(object,chunk)
package:utils:::bio7:::RweaveChunkPrefix(options)
package:utils:::bio7:::RweaveEvalWithOpt(expr,options)
package:utils:::bio7:::RweaveLatex()
package:utils:::bio7:::RweaveLatexFinish(object,error=FALSE)
package:utils:::bio7:::RweaveLatexOptions(options)
package:utils:::bio7:::RweaveLatexSetup(file,syntax,output=NULL,quiet=FALSE,debug=FALSE,stylepath,...)
package:utils:::bio7:::RweaveLatexWritedoc(object,chunk)
package:utils:::bio7:::RweaveTryStop(err,options)
package:utils:::bio7:::savehistory(file=".Rhistory")
package:utils:::bio7:::select.list(choices,preselect=NULL,multiple=FALSE,title=NULL,graphics=getOption("menu.graphics"))
package:utils:::bio7:::sessionInfo(package=NULL)
package:utils:::bio7:::setBreakpoint(srcfile,line,nameonly=TRUE,envir=parent.frame(),lastenv,verbose=TRUE,tracer,print=FALSE,clear=FALSE,...)
package:utils:::bio7:::setInternet2(use=TRUE)
package:utils:::bio7:::setRepositories(graphics=getOption("menu.graphics"),ind=NULL,addURLs=character())
package:utils:::bio7:::setStatusBar(text)
package:utils:::bio7:::setTxtProgressBar(pb,value,title=NULL,label=NULL)
package:utils:::bio7:::setWindowTitle(suffix,title=paste(getIdentification(),suffix))
package:utils:::bio7:::setWinProgressBar(pb,value,title=NULL,label=NULL)
package:utils:::bio7:::shortPathName(path)
package:utils:::bio7:::stack(x,...)
package:utils:::bio7:::Stangle(file,driver=Rtangle(),syntax=getOption("SweaveSyntax"),encoding="",...)
package:utils:::bio7:::str(object,...)
package:utils:::bio7:::strOptions(strict.width="no",digits.d=3,vec.len=4,formatNum=(x,...)format(x,trim=TRUE,drop0trailing=TRUE,...))
package:utils:::bio7:::summaryRprof(filename="Rprof.out",chunksize=5000,memory=c("none","both","tseries","stats"),lines=c("hide","show","both"),index=2,diff=TRUE,exclude=NULL,basenames=1)
package:utils:::bio7:::suppressForeignCheck(names,package,add=TRUE)
package:utils:::bio7:::Sweave(file,driver=RweaveLatex(),syntax=getOption("SweaveSyntax"),encoding="",...)
package:utils:::bio7:::SweaveHooks(options,run=FALSE,envir=.GlobalEnv)
package:utils:::bio7:::SweaveSyntaxLatexNA
package:utils:::bio7:::SweaveSyntaxNowebNA
package:utils:::bio7:::SweaveSyntConv(file,syntax,output=NULL)
package:utils:::bio7:::tail(x,...)
package:utils:::bio7:::tail.matrix(x,n=6,addrownums=TRUE,...)
package:utils:::bio7:::tar(tarfile,files=NULL,compression=c("none","gzip","bzip2","xz"),compression_level=6,tar=Sys.getenv("tar"),extra_flags="")
package:utils:::bio7:::timestamp(stamp=date(),prefix="##------",suffix="------##",quiet=FALSE)
package:utils:::bio7:::toBibtex(object,...)
package:utils:::bio7:::toLatex(object,...)
package:utils:::bio7:::txtProgressBar(min=0,max=1,initial=0,char="=",width=NA,title,label,style=1,file="")
package:utils:::bio7:::type.convert(x,na.strings="NA",as.is=FALSE,dec=".",numerals=c("allow.loss","warn.loss","no.loss"))
package:utils:::bio7:::unstack(x,...)
package:utils:::bio7:::untar(tarfile,files=NULL,list=FALSE,exdir=".",compressed=NA,extras=NULL,verbose=FALSE,restore_times=TRUE,tar=Sys.getenv("TAR"))
package:utils:::bio7:::unzip(zipfile,files=NULL,list=FALSE,overwrite=TRUE,junkpaths=FALSE,exdir=".",unzip="internal",setTimes=FALSE)
package:utils:::bio7:::update.packages(lib.loc=NULL,repos=getOption("repos"),contriburl=contrib.url(repos,type),method,instlib=NULL,ask=TRUE,available=NULL,oldPkgs=NULL,...,checkBuilt=FALSE,type=getOption("pkgType"))
package:utils:::bio7:::update.packageStatus(object,lib.loc=levels(object$inst$LibPath),repositories=levels(object$avail$Repository),...)
package:utils:::bio7:::upgrade(object,...)
package:utils:::bio7:::url.show(url,title=url,file=tempfile(),delete.file=TRUE,method,...)
package:utils:::bio7:::URLdecode(URL)
package:utils:::bio7:::URLencode(URL,reserved=FALSE)
package:utils:::bio7:::vi(name=NULL,file="")
package:utils:::bio7:::View(x,title)
package:utils:::bio7:::vignette(topic,package=NULL,lib.loc=NULL,all=TRUE)
package:utils:::bio7:::win.version()
package:utils:::bio7:::winDialog(type=c("ok","okcancel","yesno","yesnocancel"),message)
package:utils:::bio7:::winDialogString(message,default)
package:utils:::bio7:::winMenuAdd(menuname)
package:utils:::bio7:::winMenuAddItem(menuname,itemname,action)
package:utils:::bio7:::winMenuDel(menuname)
package:utils:::bio7:::winMenuDelItem(menuname,itemname)
package:utils:::bio7:::winMenuItems(menuname)
package:utils:::bio7:::winMenuNames()
package:utils:::bio7:::winProgressBar(title="Rprogressbar",label="",min=0,max=1,initial=0,width=300)
package:utils:::bio7:::write.csv(...)
package:utils:::bio7:::write.csv2(...)
package:utils:::bio7:::write.socket(socket,string)
package:utils:::bio7:::write.table(x,file="",append=FALSE,quote=TRUE,sep="",eol="\n",na="NA",dec=".",row.names=TRUE,col.names=TRUE,qmethod=c("escape","double"),fileEncoding="")
package:utils:::bio7:::writeClipboard(str,format=1)
package:utils:::bio7:::xedit(name=NULL,file="")
package:utils:::bio7:::xemacs(name=NULL,file="")
package:utils:::bio7:::zip(zipfile,files,flags="-r9X",extras="",zip=Sys.getenv("R_ZIPCMD","zip"))
package:utils:::bio7:::zip.unpack(zipname,dest)
package:datasets:::bio7:::ability.covNA
package:datasets:::bio7:::airmilesNA
package:datasets:::bio7:::AirPassengersNA
package:datasets:::bio7:::airqualityNA
package:datasets:::bio7:::anscombeNA
package:datasets:::bio7:::attenuNA
package:datasets:::bio7:::attitudeNA
package:datasets:::bio7:::austresNA
package:datasets:::bio7:::beaver1NA
package:datasets:::bio7:::beaver2NA
package:datasets:::bio7:::BJsalesNA
package:datasets:::bio7:::BJsales.leadNA
package:datasets:::bio7:::BODNA
package:datasets:::bio7:::carsNA
package:datasets:::bio7:::ChickWeightNA
package:datasets:::bio7:::chickwtsNA
package:datasets:::bio7:::co2NA
package:datasets:::bio7:::CO2NA
package:datasets:::bio7:::crimtabNA
package:datasets:::bio7:::discoveriesNA
package:datasets:::bio7:::DNaseNA
package:datasets:::bio7:::esophNA
package:datasets:::bio7:::euroNA
package:datasets:::bio7:::euro.crossNA
package:datasets:::bio7:::eurodistNA
package:datasets:::bio7:::EuStockMarketsNA
package:datasets:::bio7:::faithfulNA
package:datasets:::bio7:::fdeathsNA
package:datasets:::bio7:::FormaldehydeNA
package:datasets:::bio7:::freenyNA
package:datasets:::bio7:::freeny.xNA
package:datasets:::bio7:::freeny.yNA
package:datasets:::bio7:::HairEyeColorNA
package:datasets:::bio7:::Harman23.corNA
package:datasets:::bio7:::Harman74.corNA
package:datasets:::bio7:::IndomethNA
package:datasets:::bio7:::infertNA
package:datasets:::bio7:::InsectSpraysNA
package:datasets:::bio7:::irisNA
package:datasets:::bio7:::iris3NA
package:datasets:::bio7:::islandsNA
package:datasets:::bio7:::JohnsonJohnsonNA
package:datasets:::bio7:::LakeHuronNA
package:datasets:::bio7:::ldeathsNA
package:datasets:::bio7:::lhNA
package:datasets:::bio7:::LifeCycleSavingsNA
package:datasets:::bio7:::LoblollyNA
package:datasets:::bio7:::longleyNA
package:datasets:::bio7:::lynxNA
package:datasets:::bio7:::mdeathsNA
package:datasets:::bio7:::morleyNA
package:datasets:::bio7:::mtcarsNA
package:datasets:::bio7:::nhtempNA
package:datasets:::bio7:::NileNA
package:datasets:::bio7:::nottemNA
package:datasets:::bio7:::npkNA
package:datasets:::bio7:::occupationalStatusNA
package:datasets:::bio7:::OrangeNA
package:datasets:::bio7:::OrchardSpraysNA
package:datasets:::bio7:::PlantGrowthNA
package:datasets:::bio7:::precipNA
package:datasets:::bio7:::presidentsNA
package:datasets:::bio7:::pressureNA
package:datasets:::bio7:::PuromycinNA
package:datasets:::bio7:::quakesNA
package:datasets:::bio7:::randuNA
package:datasets:::bio7:::riversNA
package:datasets:::bio7:::rockNA
package:datasets:::bio7:::SeatbeltsNA
package:datasets:::bio7:::sleepNA
package:datasets:::bio7:::stack.lossNA
package:datasets:::bio7:::stack.xNA
package:datasets:::bio7:::stacklossNA
package:datasets:::bio7:::state.abbNA
package:datasets:::bio7:::state.areaNA
package:datasets:::bio7:::state.centerNA
package:datasets:::bio7:::state.divisionNA
package:datasets:::bio7:::state.nameNA
package:datasets:::bio7:::state.regionNA
package:datasets:::bio7:::state.x77NA
package:datasets:::bio7:::sunspot.monthNA
package:datasets:::bio7:::sunspot.yearNA
package:datasets:::bio7:::sunspotsNA
package:datasets:::bio7:::swissNA
package:datasets:::bio7:::TheophNA
package:datasets:::bio7:::TitanicNA
package:datasets:::bio7:::ToothGrowthNA
package:datasets:::bio7:::treeringNA
package:datasets:::bio7:::treesNA
package:datasets:::bio7:::UCBAdmissionsNA
package:datasets:::bio7:::UKDriverDeathsNA
package:datasets:::bio7:::UKgasNA
package:datasets:::bio7:::USAccDeathsNA
package:datasets:::bio7:::USArrestsNA
package:datasets:::bio7:::USJudgeRatingsNA
package:datasets:::bio7:::USPersonalExpenditureNA
package:datasets:::bio7:::uspopNA
package:datasets:::bio7:::VADeathsNA
package:datasets:::bio7:::volcanoNA
package:datasets:::bio7:::warpbreaksNA
package:datasets:::bio7:::womenNA
package:datasets:::bio7:::WorldPhonesNA
package:datasets:::bio7:::WWWusageNA
package:methods:::bio7:::addNextMethod(method,f="<unknown>",mlist,optional=FALSE,envir)
package:methods:::bio7:::allGenerics(...)
package:methods:::bio7:::allNames(x)
package:methods:::bio7:::Arith(e1,e2)
package:methods:::bio7:::as(object,Class,strict=TRUE,ext=possibleExtends(thisClass,Class))
package:methods:::bio7:::as<-(object,Class,value)
package:methods:::bio7:::asMethodDefinition(def,signature=list(.anyClassName),sealed=FALSE,fdef=def)
package:methods:::bio7:::assignClassDef(Class,def,where=.GlobalEnv,force=FALSE)
package:methods:::bio7:::assignMethodsMetaData(f,value,fdef,where,deflt)
package:methods:::bio7:::balanceMethodsList(mlist,args,check=TRUE)
package:methods:::bio7:::body<-(fun,envir=environment(fun),value)
package:methods:::bio7:::cacheGenericsMetaData(f,fdef,attach=TRUE,where=topenv(parent.frame()),package,methods)
package:methods:::bio7:::cacheMetaData(where,attach=TRUE,searchWhere=as.environment(where),doCheck=TRUE)
package:methods:::bio7:::cacheMethod(f,sig,def,args=names(sig),fdef,inherited=FALSE)
package:methods:::bio7:::callGeneric(...)
package:methods:::bio7:::callNextMethod(...)
package:methods:::bio7:::canCoerce(object,Class)
package:methods:::bio7:::cbind2(x,y,...)
package:methods:::bio7:::checkAtAssignment(cl,name,valueClass)
package:methods:::bio7:::checkSlotAssignment(obj,name,value)
package:methods:::bio7:::classesToAM(classes,includeSubclasses=FALSE,abbreviate=2)
package:methods:::bio7:::classLabel(Class)
package:methods:::bio7:::classMetaName(name)
package:methods:::bio7:::className(class,package)
package:methods:::bio7:::coerce(from,to,strict=TRUE)
package:methods:::bio7:::coerce<-(from,to,value)
package:methods:::bio7:::Compare(e1,e2)
package:methods:::bio7:::completeClassDefinition(Class,ClassDef=getClassDef(Class),where,doExtends=TRUE)
package:methods:::bio7:::completeExtends(ClassDef,class2,extensionDef,where)
package:methods:::bio7:::completeSubclasses(classDef,class2,extensionDef,where,classDef2=getClassDef(class2,where))
package:methods:::bio7:::Complex(z)
package:methods:::bio7:::conformMethod(signature,mnames,fnames,f="<unspecified>",fdef,method)
package:methods:::bio7:::defaultDumpName(generic,signature)
package:methods:::bio7:::defaultPrototype()
package:methods:::bio7:::doPrimitiveMethod(name,def,call=sys.call(sys.parent()),ev=sys.frame(sys.parent(2)))
package:methods:::bio7:::dumpMethod(f,signature=character(),file=defaultDumpName(f,signature),where=topenv(parent.frame()),def=getMethod(f,signature,where=where,optional=TRUE))
package:methods:::bio7:::dumpMethods(f,file="",signature=NULL,methods=findMethods(f,where=where),where=topenv(parent.frame()))
package:methods:::bio7:::el(object,where)
package:methods:::bio7:::el<-NULL
package:methods:::bio7:::elNamed(x,name,mustFind=FALSE)
package:methods:::bio7:::elNamed<-(x,name,value)
package:methods:::bio7:::empty.dump()
package:methods:::bio7:::emptyMethodsList(mlist,thisClass="ANY",sublist=list())
package:methods:::bio7:::evalOnLoad(expr,where=topenv(parent.frame()),aname="")
package:methods:::bio7:::evalqOnLoad(expr,where=topenv(parent.frame()),aname="")
package:methods:::bio7:::evalSource(source,package="",lock=TRUE,cache=FALSE)
package:methods:::bio7:::existsFunction(f,generic=TRUE,where=topenv(parent.frame()))
package:methods:::bio7:::existsMethod(f,signature=character(),where=topenv(parent.frame()))
package:methods:::bio7:::extends(class1,class2,maybe=TRUE,fullInfo=FALSE)
package:methods:::bio7:::finalDefaultMethod(method)
package:methods:::bio7:::findClass(Class,where=topenv(parent.frame()),unique="")
package:methods:::bio7:::findFunction(f,generic=TRUE,where=topenv(parent.frame()))
package:methods:::bio7:::findMethod(f,signature,where=topenv(parent.frame()))
package:methods:::bio7:::findMethods(f,where,classes=character(),inherited=FALSE,package="")
package:methods:::bio7:::findMethodSignatures(...,target=TRUE,methods=findMethods(...))
package:methods:::bio7:::findUnique(what,message,where=topenv(parent.frame()))
package:methods:::bio7:::fixPre1.8(names,where=topenv(parent.frame()))
package:methods:::bio7:::formalArgs(def)
package:methods:::bio7:::functionBody(fun=sys.(sys.parent()))
package:methods:::bio7:::functionBody<-(fun,envir=environment(fun),value)
package:methods:::bio7:::generic.skeleton(name,fdef,fdefault)
package:methods:::bio7:::getAccess(ClassDef)
package:methods:::bio7:::getAllMethods(f,fdef,where=topenv(parent.frame()))
package:methods:::bio7:::getAllSuperClasses(ClassDef,simpleOnly=TRUE)
package:methods:::bio7:::getClass(Class,.Force=FALSE,where=.classEnv(Class,topenv(parent.frame()),FALSE))
package:methods:::bio7:::getClassDef(Class,where=topenv(parent.frame()),package=packageSlot(Class),inherits=TRUE)
package:methods:::bio7:::getClasses(where=.externalCallerEnv(),inherits=missing(where))
package:methods:::bio7:::getClassName(ClassDef)
package:methods:::bio7:::getClassPackage(ClassDef)
package:methods:::bio7:::getDataPart(object)
package:methods:::bio7:::getExtends(ClassDef)
package:methods:::bio7:::getFunction(name,generic=TRUE,mustFind=TRUE,where=topenv(parent.frame()))
package:methods:::bio7:::getGeneric(f,mustFind=FALSE,where,package="")
package:methods:::bio7:::getGenerics(where,searchForm=FALSE)
package:methods:::bio7:::getGroup(fdef,recursive=FALSE,where=topenv(parent.frame()))
package:methods:::bio7:::getGroupMembers(group,recursive=FALSE,character=TRUE)
package:methods:::bio7:::getLoadActions(where=topenv(parent.frame()))
package:methods:::bio7:::getMethod(f,signature=character(),where=topenv(parent.frame()),optional=FALSE,mlist,fdef)
package:methods:::bio7:::getMethods(f,where=topenv(parent.frame()),table=FALSE)
package:methods:::bio7:::getMethodsForDispatch(fdef,inherited=FALSE)
package:methods:::bio7:::getMethodsMetaData(f,where=topenv(parent.frame()))
package:methods:::bio7:::getPackageName(where=topenv(parent.frame()),create=TRUE)
package:methods:::bio7:::getProperties(ClassDef)
package:methods:::bio7:::getPrototype(ClassDef)
package:methods:::bio7:::getRefClass(Class,where=topenv(parent.frame()))
package:methods:::bio7:::getSlots(x)
package:methods:::bio7:::getSubclasses(ClassDef)
package:methods:::bio7:::getValidity(ClassDef)
package:methods:::bio7:::getVirtual(ClassDef)
package:methods:::bio7:::hasArg(name)
package:methods:::bio7:::hasLoadAction(aname,where=topenv(parent.frame()))
package:methods:::bio7:::hasMethod(f,signature=character(),where=.genEnv(f,topenv(parent.frame())))
package:methods:::bio7:::hasMethods(f,where,package="")
package:methods:::bio7:::implicitGeneric(name,where=topenv(parent.frame()),generic=getGeneric(name,where=where))
package:methods:::bio7:::inheritedSlotNames(Class,where=topenv(parent.frame()))
package:methods:::bio7:::initFieldArgs(.Object,classDef,selfEnv,...)
package:methods:::bio7:::initialize(.Object,...)
package:methods:::bio7:::initRefFields(.Object,classDef,selfEnv,args)
package:methods:::bio7:::insertClassMethods(methods,Class,value,fieldNames,returnAll)
package:methods:::bio7:::insertMethod(mlist,signature,args,def,cacheOnly=FALSE)
package:methods:::bio7:::insertSource(source,package="",s=allPlainObjects(),methods=(if(missing(s))allMethodTables()elseNULL),force=missing(s)&missing(methods))
package:methods:::bio7:::is(object,class2)
package:methods:::bio7:::isClass(Class,formal=TRUE,where=topenv(parent.frame()))
package:methods:::bio7:::isClassDef(object)
package:methods:::bio7:::isClassUnion(Class)
package:methods:::bio7:::isGeneric(f,where=topenv(parent.frame()),fdef=NULL,getName=FALSE)
package:methods:::bio7:::isGrammarSymbol(symbol)
package:methods:::bio7:::isGroup(f,where=topenv(parent.frame()),fdef=getGeneric(f,where=where))
package:methods:::bio7:::isSealedClass(Class,where=topenv(parent.frame()))
package:methods:::bio7:::isSealedMethod(f,signature,fdef=getGeneric(f,FALSE,where=where),where=topenv(parent.frame()))
package:methods:::bio7:::isVirtualClass(Class,where=topenv(parent.frame()))
package:methods:::bio7:::isXS3Class(classDef)
package:methods:::bio7:::kronecker(X,Y,FUN="*",make.dimnames=FALSE,...)
package:methods:::bio7:::languageEl(object,which)
package:methods:::bio7:::languageEl<-(object,which,value)
package:methods:::bio7:::linearizeMlist(mlist,inherited=TRUE)
package:methods:::bio7:::listFromMethods(generic,where,table)
package:methods:::bio7:::listFromMlist(mlist,prefix=list(),sigs.=TRUE,methods.=TRUE)
package:methods:::bio7:::loadMethod(method,fname,envir)
package:methods:::bio7:::Logic(e1,e2)
package:methods:::bio7:::makeClassRepresentation(name,slots=list(),superClasses=character(),prototype=NULL,package,validity=NULL,access=list(),version=.newExternalptr(),sealed=FALSE,virtual=NA,where)
package:methods:::bio7:::makeExtends(Class,to,coerce=NULL,test=NULL,replace=NULL,by=character(),package,slots=getSlots(classDef1),classDef1=getClass(Class),classDef2)
package:methods:::bio7:::makeGeneric(f,fdef,fdefault=fdef,group=list(),valueClass=character(),package=getPackageName(environment(fdef)),signature=NULL,genericFunction=NULL,simpleInheritanceOnly=NULL)
package:methods:::bio7:::makeMethodsList(object,level=1)
package:methods:::bio7:::makePrototypeFromClassDef(slots,ClassDef,extends,where)
package:methods:::bio7:::makeStandardGeneric(f,fdef)
package:methods:::bio7:::matchSignature(signature,fun,where=baseenv())
package:methods:::bio7:::Math(x)
package:methods:::bio7:::Math2(x,digits)
package:methods:::bio7:::mergeMethods(m1,m2,genericLabel=character())
package:methods:::bio7:::metaNameUndo(strings,prefix,searchForm=FALSE)
package:methods:::bio7:::method.skeleton(generic,signature,file,external=FALSE,where=topenv(parent.frame()))
package:methods:::bio7:::MethodAddCoerce(method,argName,thisClass,methodClass)
package:methods:::bio7:::methodSignatureMatrix(object,sigSlots=c("target","defined"))
package:methods:::bio7:::MethodsList(.ArgName,...)
package:methods:::bio7:::MethodsListSelect(f,env,mlist=NULL,fEnv=if(is(fdef,"genericFunction"))environment(fdef)elsebaseenv(),finalDefault=finalDefaultMethod(mlist),evalArgs=TRUE,useInherited=TRUE,fdef=getGeneric(f,where=env),resetAllowed=TRUE)
package:methods:::bio7:::methodsPackageMetaName(prefix,name,package="")
package:methods:::bio7:::missingArg(symbol,envir=parent.frame(),eval=FALSE)
package:methods:::bio7:::mlistMetaName(name="",package="")
package:methods:::bio7:::multipleClasses(details=FALSE)
package:methods:::bio7:::new(Class,...)
package:methods:::bio7:::newBasic(Class,...)
package:methods:::bio7:::newClassRepresentation(...)
package:methods:::bio7:::newEmptyObject()
package:methods:::bio7:::Ops(e1,e2)
package:methods:::bio7:::packageSlot(object)
package:methods:::bio7:::packageSlot<-(object,value)
package:methods:::bio7:::possibleExtends(class1,class2,ClassDef1=getClassDef(class1),ClassDef2=getClassDef(class2,where=.classEnv(ClassDef1)))
package:methods:::bio7:::prohibitGeneric(name,where=topenv(parent.frame()))
package:methods:::bio7:::promptClass(clName,filename=NULL,type="class",keywords="classes",where=topenv(parent.frame()),generatorName=clName)
package:methods:::bio7:::promptMethods(f,filename=NULL,methods)
package:methods:::bio7:::prototype(...)
package:methods:::bio7:::Quote(expr)
package:methods:::bio7:::rbind2(x,y,...)
package:methods:::bio7:::reconcilePropertiesAndPrototype(name,properties,prototype,superClasses,where)
package:methods:::bio7:::registerImplicitGenerics(what=.ImplicitGenericsTable(where),where=topenv(parent.frame()))
package:methods:::bio7:::rematchDefinition(definition,generic,mnames,fnames,signature)
package:methods:::bio7:::removeClass(Class,where=topenv(parent.frame()))
package:methods:::bio7:::removeGeneric(f,where=topenv(parent.frame()))
package:methods:::bio7:::removeMethod(f,signature=character(),where=topenv(parent.frame()))
package:methods:::bio7:::removeMethods(f,where=topenv(parent.frame()),all=missing(where))
package:methods:::bio7:::removeMethodsObject(f,where=topenv(parent.frame()))
package:methods:::bio7:::representation(...)
package:methods:::bio7:::requireMethods(s,signature,message="",where=topenv(parent.frame()))
package:methods:::bio7:::resetClass(Class,classDef,where)
package:methods:::bio7:::resetGeneric(f,fdef=getGeneric(f,where=where),mlist=getMethodsForDispatch(fdef),where=topenv(parent.frame()),deflt=finalDefaultMethod(mlist))
package:methods:::bio7:::S3Class(object)
package:methods:::bio7:::S3Class<-(object,value)
package:methods:::bio7:::S3Part(object,strictS3=FALSE,S3Class)
package:methods:::bio7:::S3Part<-(object,strictS3=FALSE,needClass=.S3Class(object),value)
package:methods:::bio7:::sealClass(Class,where=topenv(parent.frame()))
package:methods:::bio7:::seemsS4Object(object)
package:methods:::bio7:::selectMethod(f,signature,optional=FALSE,useInherited=TRUE,mlist=if(!is.null(fdef))getMethodsForDispatch(fdef),fdef=getGeneric(f,!optional),verbose=FALSE,doCache=FALSE)
package:methods:::bio7:::selectSuperClasses(Class,dropVirtual=FALSE,namesOnly=TRUE,directOnly=TRUE,simpleOnly=directOnly,where=topenv(parent.frame()))
package:methods:::bio7:::setAs(from,to,def,replace=NULL,where=topenv(parent.frame()))
package:methods:::bio7:::setClass(Class,representation=list(),prototype=NULL,contains=character(),validity=NULL,access=list(),where=topenv(parent.frame()),version=.newExternalptr(),sealed=FALSE,package=getPackageName(where),S3methods=FALSE,slots)
package:methods:::bio7:::setClassUnion(name,members=character(),where=topenv(parent.frame()))
package:methods:::bio7:::setDataPart(object,value,check=TRUE)
package:methods:::bio7:::setGeneric(name,def=NULL,group=list(),valueClass=character(),where=topenv(parent.frame()),package=NULL,signature=NULL,useAsDefault=NULL,genericFunction=NULL,simpleInheritanceOnly=NULL)
package:methods:::bio7:::setGenericImplicit(name,where=topenv(parent.frame()),restore=TRUE)
package:methods:::bio7:::setGroupGeneric(name,def=NULL,group=list(),valueClass=character(),knownMembers=list(),package=getPackageName(where),where=topenv(parent.frame()))
package:methods:::bio7:::setIs(class1,class2,test=NULL,coerce=NULL,replace=NULL,by=character(),where=topenv(parent.frame()),classDef=getClass(class1,TRUE,where=where),extensionObject=NULL,doComplete=TRUE)
package:methods:::bio7:::setLoadAction(action,aname="",where=topenv(parent.frame()))
package:methods:::bio7:::setLoadActions(...,.where=topenv(parent.frame()))
package:methods:::bio7:::setMethod(f,signature=character(),definition,where=topenv(parent.frame()),valueClass=NULL,sealed=FALSE)
package:methods:::bio7:::setOldClass(Classes,prototype=NULL,where=topenv(parent.frame()),test=FALSE,S4Class)
package:methods:::bio7:::setPackageName(pkg,env)
package:methods:::bio7:::setPrimitiveMethods(f,fdef,code,generic,mlist=get(".Methods",envir=environment(generic)))
package:methods:::bio7:::setRefClass(Class,fields=character(),contains=character(),methods=list(),where=topenv(parent.frame()),...)
package:methods:::bio7:::setReplaceMethod(f,...,where=topenv(parent.frame()))
package:methods:::bio7:::setValidity(Class,method,where=topenv(parent.frame()))
package:methods:::bio7:::show(object)
package:methods:::bio7:::showClass(Class,complete=TRUE,propertiesAreCalled="Slots")
package:methods:::bio7:::showDefault(object,oldMethods=TRUE)
package:methods:::bio7:::showExtends(ext,printTo=stdout())
package:methods:::bio7:::showMethods(f=character(),where=topenv(parent.frame()),classes=NULL,includeDefs=FALSE,inherited=!includeDefs,showEmpty,printTo=stdout(),fdef=getGeneric(f,where=where))
package:methods:::bio7:::showMlist(mlist,includeDefs=TRUE,inherited=TRUE,classes=NULL,useArgNames=TRUE,printTo=stdout())
package:methods:::bio7:::signature(...)
package:methods:::bio7:::SignatureMethod(names,signature,definition)
package:methods:::bio7:::sigToEnv(signature,generic)
package:methods:::bio7:::slot(object,name)
package:methods:::bio7:::slot<-(object,name,check=TRUE,value)
package:methods:::bio7:::slotNames(x)
package:methods:::bio7:::slotsFromS3(object)
package:methods:::bio7:::substituteDirect(object,frame=parent.frame(),cleanFunction=TRUE)
package:methods:::bio7:::substituteFunctionArgs(def,newArgs,args=formalArgs(def),silent=FALSE,Name="a")
package:methods:::bio7:::Summary(x,...,na.rm=FALSE)
package:methods:::bio7:::superClassDepth(ClassDef,soFar=ClassDef@className,simpleOnly=TRUE)
package:methods:::bio7:::testInheritedMethods(f,signatures,test=TRUE,virtual=FALSE,groupMethods=TRUE,where=.GlobalEnv)
package:methods:::bio7:::testVirtual(properties,extends,prototype,where)
package:methods:::bio7:::traceOff(whatL)
package:methods:::bio7:::traceOn(what,tracer=browseAll,exit=NULL)
package:methods:::bio7:::tryNew(Class,where)
package:methods:::bio7:::unRematchDefinition(definition)
package:methods:::bio7:::validObject(object,test=FALSE,complete=FALSE)
package:methods:::bio7:::validSlotNames(names)
package:base:::bio7:::-(e1,e2)
package:base:::bio7:::-.Date(e1,e2)
package:base:::bio7:::-.POSIXt(e1,e2)
package:base:::bio7:::!(x)
package:base:::bio7:::!.hexmode(a)
package:base:::bio7:::!.octmode(a)
package:base:::bio7:::!=(e1,e2)
package:base:::bio7:::$NULL
package:base:::bio7:::$.data.frame(x,name)
package:base:::bio7:::$.DLLInfo(x,name)
package:base:::bio7:::$.package_version(x,name)
package:base:::bio7:::$<-NULL
package:base:::bio7:::$<-.data.frame(x,name,value)
package:base:::bio7:::%%(e1,e2)
package:base:::bio7:::%*%(x,y)
package:base:::bio7:::%/%(e1,e2)
package:base:::bio7:::%in%(x,table)
package:base:::bio7:::%o%(X,Y)
package:base:::bio7:::%x%(X,Y)
package:base:::bio7:::&(e1,e2)
package:base:::bio7:::&&NULL
package:base:::bio7:::&.hexmode(a,b)
package:base:::bio7:::&.octmode(a,b)
package:base:::bio7:::(NULL
package:base:::bio7:::*(e1,e2)
package:base:::bio7:::*.difftime(e1,e2)
package:base:::bio7:::/(e1,e2)
package:base:::bio7:::/.difftime(e1,e2)
package:base:::bio7::::NULL
package:base:::bio7:::::(pkg,name)
package:base:::bio7::::::(pkg,name)
package:base:::bio7:::@NULL
package:base:::bio7:::@<-NULL
package:base:::bio7:::[NULL
package:base:::bio7:::[.AsIs(x,i,...)
package:base:::bio7:::[.data.frame(x,i,j,drop=if(missing(i))TRUEelselength(cols)==1)
package:base:::bio7:::[.Date(x,...,drop=TRUE)
package:base:::bio7:::[.difftime(x,...,drop=TRUE)
package:base:::bio7:::[.factor(x,...,drop=FALSE)
package:base:::bio7:::[.hexmode(x,i)
package:base:::bio7:::[.listof(x,i,...)
package:base:::bio7:::[.noquote(x,...)
package:base:::bio7:::[.numeric_version(x,i,j)
package:base:::bio7:::[.octmode(x,i)
package:base:::bio7:::[.POSIXct(x,...,drop=TRUE)
package:base:::bio7:::[.POSIXlt(x,...,drop=TRUE)
package:base:::bio7:::[.simple.list(x,i,...)
package:base:::bio7:::[.warnings(x,...)
package:base:::bio7:::[[NULL
package:base:::bio7:::[[.data.frame(x,...,exact=TRUE)
package:base:::bio7:::[[.Date(x,...,drop=TRUE)
package:base:::bio7:::[[.factor(x,...)
package:base:::bio7:::[[.numeric_version(x,...,exact=NA)
package:base:::bio7:::[[.POSIXct(x,...,drop=TRUE)
package:base:::bio7:::[[<-NULL
package:base:::bio7:::[[<-.data.frame(x,i,j,value)
package:base:::bio7:::[[<-.factor(x,...,value)
package:base:::bio7:::[[<-.numeric_version(x,...,value)
package:base:::bio7:::[<-NULL
package:base:::bio7:::[<-.data.frame(x,i,j,value)
package:base:::bio7:::[<-.Date(x,...,value)
package:base:::bio7:::[<-.factor(x,...,value)
package:base:::bio7:::[<-.POSIXct(x,...,value)
package:base:::bio7:::[<-.POSIXlt(x,i,value)
package:base:::bio7:::^(e1,e2)
package:base:::bio7:::{NULL
package:base:::bio7:::|(e1,e2)
package:base:::bio7:::|.hexmode(a,b)
package:base:::bio7:::|.octmode(a,b)
package:base:::bio7:::||NULL
package:base:::bio7:::~NULL
package:base:::bio7:::+(e1,e2)
package:base:::bio7:::+.Date(e1,e2)
package:base:::bio7:::+.POSIXt(e1,e2)
package:base:::bio7:::<(e1,e2)
package:base:::bio7:::<-NULL
package:base:::bio7:::<<-NULL
package:base:::bio7:::<=(e1,e2)
package:base:::bio7:::=NULL
package:base:::bio7:::==(e1,e2)
package:base:::bio7:::>(e1,e2)
package:base:::bio7:::>=(e1,e2)
package:base:::bio7:::abbreviate(names.arg,minlength=4,use.classes=TRUE,dot=FALSE,strict=FALSE,method=c("left.kept","both.sides"))
package:base:::bio7:::abs(x)
package:base:::bio7:::acos(x)
package:base:::bio7:::acosh(x)
package:base:::bio7:::addNA(x,ifany=FALSE)
package:base:::bio7:::addTaskCallback(f,data=NULL,name=character())
package:base:::bio7:::agrep(pattern,x,max.distance=0.1,costs=NULL,ignore.case=FALSE,value=FALSE,fixed=TRUE,useBytes=FALSE)
package:base:::bio7:::agrepl(pattern,x,max.distance=0.1,costs=NULL,ignore.case=FALSE,fixed=TRUE,useBytes=FALSE)
package:base:::bio7:::alist(...)
package:base:::bio7:::all(...,na.rm=FALSE)
package:base:::bio7:::all.equal(target,current,...)
package:base:::bio7:::all.equal.character(target,current,...,check.attributes=TRUE)
package:base:::bio7:::all.equal.default(target,current,...)
package:base:::bio7:::all.equal.factor(target,current,...,check.attributes=TRUE)
package:base:::bio7:::all.equal.formula(target,current,...)
package:base:::bio7:::all.equal.language(target,current,...)
package:base:::bio7:::all.equal.list(target,current,...,check.attributes=TRUE,use.names=TRUE)
package:base:::bio7:::all.equal.numeric(target,current,tolerance=.Machine$double.eps^0.5,scale=NULL,...,check.attributes=TRUE)
package:base:::bio7:::all.equal.POSIXt(target,current,...,tolerance=0.001,scale)
package:base:::bio7:::all.equal.raw(target,current,...,check.attributes=TRUE)
package:base:::bio7:::all.names(expr,s=TRUE,max.names=-1,unique=FALSE)
package:base:::bio7:::all.vars(expr,s=FALSE,max.names=-1,unique=TRUE)
package:base:::bio7:::any(...,na.rm=FALSE)
package:base:::bio7:::anyDuplicated(x,incomparables=FALSE,...)
package:base:::bio7:::anyDuplicated.array(x,incomparables=FALSE,MARGIN=1,fromLast=FALSE,...)
package:base:::bio7:::anyDuplicated.data.frame(x,incomparables=FALSE,fromLast=FALSE,...)
package:base:::bio7:::anyDuplicated.default(x,incomparables=FALSE,fromLast=FALSE,...)
package:base:::bio7:::anyDuplicated.matrix(x,incomparables=FALSE,MARGIN=1,fromLast=FALSE,...)
package:base:::bio7:::anyNA(x)
package:base:::bio7:::anyNA.numeric_version(x)
package:base:::bio7:::anyNA.POSIXlt(x)
package:base:::bio7:::aperm(a,perm,...)
package:base:::bio7:::aperm.default(a,perm=NULL,resize=TRUE,...)
package:base:::bio7:::aperm.table(a,perm=NULL,resize=TRUE,keep.class=TRUE,...)
package:base:::bio7:::append(x,values,after=length(x))
package:base:::bio7:::apply(X,MARGIN,FUN,...)
package:base:::bio7:::Arg(z)
package:base:::bio7:::args(name)
package:base:::bio7:::array(data=NA,dim=length(data),dimnames=NULL)
package:base:::bio7:::arrayInd(ind,.dim,.dimnames=NULL,useNames=FALSE)
package:base:::bio7:::as.array(x,...)
package:base:::bio7:::as.array.default(x,...)
package:base:::bio7:::as.call(x)
package:base:::bio7:::as.character(x,...)
package:base:::bio7:::as.character.condition(x,...)
package:base:::bio7:::as.character.Date(x,...)
package:base:::bio7:::as.character.default(x,...)
package:base:::bio7:::as.character.error(x,...)
package:base:::bio7:::as.character.factor(x,...)
package:base:::bio7:::as.character.hexmode(x,...)
package:base:::bio7:::as.character.numeric_version(x,...)
package:base:::bio7:::as.character.octmode(x,...)
package:base:::bio7:::as.character.POSIXt(x,...)
package:base:::bio7:::as.character.srcref(x,useSource=TRUE,...)
package:base:::bio7:::as.complex(x,...)
package:base:::bio7:::as.data.frame(x,row.names=NULL,optional=FALSE,...)
package:base:::bio7:::as.data.frame.array(x,row.names=NULL,optional=FALSE,...)
package:base:::bio7:::as.data.frame.AsIs(x,row.names=NULL,optional=FALSE,...)
package:base:::bio7:::as.data.frame.character(x,...,stringsAsFactors=default.stringsAsFactors())
package:base:::bio7:::as.data.frame.complex(x,row.names=NULL,optional=FALSE,...,nm=paste(deparse(substitute(x),width.cutoff=500),collapse=""))
package:base:::bio7:::as.data.frame.data.frame(x,row.names=NULL,...)
package:base:::bio7:::as.data.frame.Date(x,row.names=NULL,optional=FALSE,...,nm=paste(deparse(substitute(x),width.cutoff=500),collapse=""))
package:base:::bio7:::as.data.frame.default(x,...)
package:base:::bio7:::as.data.frame.difftime(x,row.names=NULL,optional=FALSE,...,nm=paste(deparse(substitute(x),width.cutoff=500),collapse=""))
package:base:::bio7:::as.data.frame.factor(x,row.names=NULL,optional=FALSE,...,nm=paste(deparse(substitute(x),width.cutoff=500),collapse=""))
package:base:::bio7:::as.data.frame.integer(x,row.names=NULL,optional=FALSE,...,nm=paste(deparse(substitute(x),width.cutoff=500),collapse=""))
package:base:::bio7:::as.data.frame.list(x,row.names=NULL,optional=FALSE,...,stringsAsFactors=default.stringsAsFactors())
package:base:::bio7:::as.data.frame.logical(x,row.names=NULL,optional=FALSE,...,nm=paste(deparse(substitute(x),width.cutoff=500),collapse=""))
package:base:::bio7:::as.data.frame.matrix(x,row.names=NULL,optional=FALSE,...,stringsAsFactors=default.stringsAsFactors())
package:base:::bio7:::as.data.frame.model.matrix(x,row.names=NULL,optional=FALSE,...)
package:base:::bio7:::as.data.frame.numeric(x,row.names=NULL,optional=FALSE,...,nm=paste(deparse(substitute(x),width.cutoff=500),collapse=""))
package:base:::bio7:::as.data.frame.numeric_version(x,row.names=NULL,optional=FALSE,...,nm=paste(deparse(substitute(x),width.cutoff=500),collapse=""))
package:base:::bio7:::as.data.frame.ordered(x,row.names=NULL,optional=FALSE,...,nm=paste(deparse(substitute(x),width.cutoff=500),collapse=""))
package:base:::bio7:::as.data.frame.POSIXct(x,row.names=NULL,optional=FALSE,...,nm=paste(deparse(substitute(x),width.cutoff=500),collapse=""))
package:base:::bio7:::as.data.frame.POSIXlt(x,row.names=NULL,optional=FALSE,...)
package:base:::bio7:::as.data.frame.raw(x,row.names=NULL,optional=FALSE,...,nm=paste(deparse(substitute(x),width.cutoff=500),collapse=""))
package:base:::bio7:::as.data.frame.table(x,row.names=NULL,...,responseName="Freq",stringsAsFactors=TRUE,sep="",base=list(LETTERS))
package:base:::bio7:::as.data.frame.ts(x,...)
package:base:::bio7:::as.data.frame.vector(x,row.names=NULL,optional=FALSE,...,nm=paste(deparse(substitute(x),width.cutoff=500),collapse=""))
package:base:::bio7:::as.Date(x,...)
package:base:::bio7:::as.Date.character(x,format="",...)
package:base:::bio7:::as.Date.date(x,...)
package:base:::bio7:::as.Date.dates(x,...)
package:base:::bio7:::as.Date.default(x,...)
package:base:::bio7:::as.Date.factor(x,...)
package:base:::bio7:::as.Date.numeric(x,origin,...)
package:base:::bio7:::as.Date.POSIXct(x,tz="UTC",...)
package:base:::bio7:::as.Date.POSIXlt(x,...)
package:base:::bio7:::as.difftime(tim,format="%X",units="auto")
package:base:::bio7:::as.double(x,...)
package:base:::bio7:::as.double.difftime(x,units="auto",...)
package:base:::bio7:::as.double.POSIXlt(x,...)
package:base:::bio7:::as.environment(x)
package:base:::bio7:::as.expression(x,...)
package:base:::bio7:::as.expression.default(x,...)
package:base:::bio7:::as.factor(x)
package:base:::bio7:::as.function(x,...)
package:base:::bio7:::as.function.default(x,envir=parent.frame(),...)
package:base:::bio7:::as.hexmode(x)
package:base:::bio7:::as.integer(x,...)
package:base:::bio7:::as.list(x,...)
package:base:::bio7:::as.list.data.frame(x,...)
package:base:::bio7:::as.list.Date(x,...)
package:base:::bio7:::as.list.default(x,...)
package:base:::bio7:::as.list.environment(x,all.names=FALSE,...)
package:base:::bio7:::as.list.factor(x,...)
package:base:::bio7:::as.list.function(x,...)
package:base:::bio7:::as.list.numeric_version(x,...)
package:base:::bio7:::as.list.POSIXct(x,...)
package:base:::bio7:::as.logical(x,...)
package:base:::bio7:::as.logical.factor(x,...)
package:base:::bio7:::as.matrix(x,...)
package:base:::bio7:::as.matrix.data.frame(x,rownames.force=NA,...)
package:base:::bio7:::as.matrix.default(x,...)
package:base:::bio7:::as.matrix.noquote(x,...)
package:base:::bio7:::as.matrix.POSIXlt(x,...)
package:base:::bio7:::as.name(x)
package:base:::bio7:::as.null(x,...)
package:base:::bio7:::as.null.default(x,...)
package:base:::bio7:::as.numeric(x,...)
package:base:::bio7:::as.numeric_version(x)
package:base:::bio7:::as.octmode(x)
package:base:::bio7:::as.ordered(x)
package:base:::bio7:::as.package_version(x)
package:base:::bio7:::as.pairlist(x)
package:base:::bio7:::as.POSIXct(x,tz="",...)
package:base:::bio7:::as.POSIXct.date(x,...)
package:base:::bio7:::as.POSIXct.Date(x,...)
package:base:::bio7:::as.POSIXct.dates(x,...)
package:base:::bio7:::as.POSIXct.default(x,tz="",...)
package:base:::bio7:::as.POSIXct.numeric(x,tz="",origin,...)
package:base:::bio7:::as.POSIXct.POSIXlt(x,tz="",...)
package:base:::bio7:::as.POSIXlt(x,tz="",...)
package:base:::bio7:::as.POSIXlt.character(x,tz="",format,...)
package:base:::bio7:::as.POSIXlt.date(x,...)
package:base:::bio7:::as.POSIXlt.Date(x,...)
package:base:::bio7:::as.POSIXlt.dates(x,...)
package:base:::bio7:::as.POSIXlt.default(x,tz="",...)
package:base:::bio7:::as.POSIXlt.factor(x,...)
package:base:::bio7:::as.POSIXlt.numeric(x,tz="",origin,...)
package:base:::bio7:::as.POSIXlt.POSIXct(x,tz="",...)
package:base:::bio7:::as.qr(x)
package:base:::bio7:::as.raw(x)
package:base:::bio7:::as.single(x,...)
package:base:::bio7:::as.single.default(x,...)
package:base:::bio7:::as.symbol(x)
package:base:::bio7:::as.table(x,...)
package:base:::bio7:::as.table.default(x,...)
package:base:::bio7:::as.vector(x,mode="any")
package:base:::bio7:::as.vector.factor(x,mode="any")
package:base:::bio7:::asin(x)
package:base:::bio7:::asinh(x)
package:base:::bio7:::asNamespace(ns,base.OK=TRUE)
package:base:::bio7:::asS3(object,flag=TRUE,complete=TRUE)
package:base:::bio7:::asS4(object,flag=TRUE,complete=TRUE)
package:base:::bio7:::assign(x,value,pos=-1,envir=as.environment(pos),inherits=FALSE,immediate=TRUE)
package:base:::bio7:::atan(x)
package:base:::bio7:::atan2(y,x)
package:base:::bio7:::atanh(x)
package:base:::bio7:::attach(what,pos=2,name=deparse(substitute(what)),warn.conflicts=TRUE)
package:base:::bio7:::attachNamespace(ns,pos=2,depends=NULL)
package:base:::bio7:::attr(x,which,exact=FALSE)
package:base:::bio7:::attr.all.equal(target,current,...,check.attributes=TRUE,check.names=TRUE)
package:base:::bio7:::attr<-(x,which,value)
package:base:::bio7:::attributes(obj)
package:base:::bio7:::attributes<-(obj,value)
package:base:::bio7:::autoload(name,package,reset=FALSE,...)
package:base:::bio7:::autoloader(name,package,...)
package:base:::bio7:::backsolve(r,x,k=ncol(r),upper.tri=TRUE,transpose=FALSE)
package:base:::bio7:::baseenv()
package:base:::bio7:::basename(path)
package:base:::bio7:::besselI(x,nu,expon.scaled=FALSE)
package:base:::bio7:::besselJ(x,nu)
package:base:::bio7:::besselK(x,nu,expon.scaled=FALSE)
package:base:::bio7:::besselY(x,nu)
package:base:::bio7:::beta(a,b)
package:base:::bio7:::bindingIsActive(sym,env)
package:base:::bio7:::bindingIsLocked(sym,env)
package:base:::bio7:::bindtextdomain(domain,dirname=NULL)
package:base:::bio7:::bitwAnd(a,b)
package:base:::bio7:::bitwNot(a)
package:base:::bio7:::bitwOr(a,b)
package:base:::bio7:::bitwShiftL(a,n)
package:base:::bio7:::bitwShiftR(a,n)
package:base:::bio7:::bitwXor(a,b)
package:base:::bio7:::body(fun=sys.(sys.parent()))
package:base:::bio7:::body<-(fun,envir=environment(fun),value)
package:base:::bio7:::bquote(expr,where=parent.frame())
package:base:::bio7:::breakNULL
package:base:::bio7:::browser(text="",condition=NULL,expr=TRUE,skipCalls=0)
package:base:::bio7:::browserCondition(n=1)
package:base:::bio7:::browserSetDebug(n=1)
package:base:::bio7:::browserText(n=1)
package:base:::bio7:::builtins(internal=FALSE)
package:base:::bio7:::by(data,INDICES,FUN,...,simplify=TRUE)
package:base:::bio7:::by.data.frame(data,INDICES,FUN,...,simplify=TRUE)
package:base:::bio7:::by.default(data,INDICES,FUN,...,simplify=TRUE)
package:base:::bio7:::bzfile(description,open="",encoding=getOption("encoding"),compression=9)
package:base:::bio7:::c(...,recursive=FALSE)
package:base:::bio7:::c.Date(...,recursive=FALSE)
package:base:::bio7:::c.noquote(...,recursive=FALSE)
package:base:::bio7:::c.numeric_version(...,recursive=FALSE)
package:base:::bio7:::c.POSIXct(...,recursive=FALSE)
package:base:::bio7:::c.POSIXlt(...,recursive=FALSE)
package:base:::bio7:::call(name,...)
package:base:::bio7:::callCC(fun)
package:base:::bio7:::capabilities(what=NULL)
package:base:::bio7:::casefold(x,upper=FALSE)
package:base:::bio7:::cat(...,file="",sep="",fill=FALSE,labels=NULL,append=FALSE)
package:base:::bio7:::cbind(...,deparse.level=1)
package:base:::bio7:::cbind.data.frame(...,deparse.level=1)
package:base:::bio7:::ceiling(x)
package:base:::bio7:::char.expand(input,target,nomatch=stop("nomatch"))
package:base:::bio7:::character(length=0)
package:base:::bio7:::charmatch(x,table,nomatch=NA)
package:base:::bio7:::charToRaw(x)
package:base:::bio7:::chartr(old,new,x)
package:base:::bio7:::check_tzones(...)
package:base:::bio7:::chol(x,...)
package:base:::bio7:::chol.default(x,pivot=FALSE,LINPACK=FALSE,tol=-1,...)
package:base:::bio7:::chol2inv(x,size=NCOL(x),LINPACK=FALSE)
package:base:::bio7:::choose(n,k)
package:base:::bio7:::class(x)
package:base:::bio7:::class<-(x,value)
package:base:::bio7:::clearPushBack(connection)
package:base:::bio7:::close(con,...)
package:base:::bio7:::close.connection(con,type="rw",...)
package:base:::bio7:::close.srcfile(con,...)
package:base:::bio7:::close.srcfilealias(con,...)
package:base:::bio7:::closeAllConnections()
package:base:::bio7:::col(x,as.factor=FALSE)
package:base:::bio7:::colMeans(x,na.rm=FALSE,dims=1)
package:base:::bio7:::colnames(x,do.NULL=TRUE,prefix="col")
package:base:::bio7:::colnames<-(x,value)
package:base:::bio7:::colSums(x,na.rm=FALSE,dims=1)
package:base:::bio7:::commandArgs(trailingOnly=FALSE)
package:base:::bio7:::comment(x)
package:base:::bio7:::comment<-(x,value)
package:base:::bio7:::complex(length.out=0,real=numeric(),imaginary=numeric(),modulus=1,argument=0)
package:base:::bio7:::computeRestarts(cond=NULL)
package:base:::bio7:::conditionCall(c)
package:base:::bio7:::conditionCall.condition(c)
package:base:::bio7:::conditionMessage(c)
package:base:::bio7:::conditionMessage.condition(c)
package:base:::bio7:::conflicts(where=search(),detail=FALSE)
package:base:::bio7:::Conj(z)
package:base:::bio7:::contributors()
package:base:::bio7:::cos(x)
package:base:::bio7:::cosh(x)
package:base:::bio7:::cospi(x)
package:base:::bio7:::crossprod(x,y=NULL)
package:base:::bio7:::Cstack_info()
package:base:::bio7:::cummax(x)
package:base:::bio7:::cummin(x)
package:base:::bio7:::cumprod(x)
package:base:::bio7:::cumsum(x)
package:base:::bio7:::cut(x,...)
package:base:::bio7:::cut.Date(x,breaks,labels=NULL,start.on.monday=TRUE,right=FALSE,...)
package:base:::bio7:::cut.default(x,breaks,labels=NULL,include.lowest=FALSE,right=TRUE,dig.lab=3,ordered_result=FALSE,...)
package:base:::bio7:::cut.POSIXt(x,breaks,labels=NULL,start.on.monday=TRUE,right=FALSE,...)
package:base:::bio7:::data.class(x)
package:base:::bio7:::data.frame(...,row.names=NULL,check.rows=FALSE,check.names=TRUE,stringsAsFactors=default.stringsAsFactors())
package:base:::bio7:::data.matrix(frame,rownames.force=NA)
package:base:::bio7:::date()
package:base:::bio7:::debug(fun,text="",condition=NULL)
package:base:::bio7:::debugonce(fun,text="",condition=NULL)
package:base:::bio7:::default.stringsAsFactors()
package:base:::bio7:::delayedAssign(x,value,eval.env=parent.frame(1),assign.env=parent.frame(1))
package:base:::bio7:::deparse(expr,width.cutoff=60,backtick=mode(expr)%in%c("call","expression","(",""),control=c("keepInteger","showAttributes","keepNA"),nlines=-1)
package:base:::bio7:::det(x,...)
package:base:::bio7:::detach(name,pos=2,unload=FALSE,character.only=FALSE,force=FALSE)
package:base:::bio7:::determinant(x,logarithm=TRUE,...)
package:base:::bio7:::determinant.matrix(x,logarithm=TRUE,...)
package:base:::bio7:::dget(file)
package:base:::bio7:::diag(x=1,nrow,ncol)
package:base:::bio7:::diag<-(x,value)
package:base:::bio7:::diff(x,...)
package:base:::bio7:::diff.Date(x,lag=1,differences=1,...)
package:base:::bio7:::diff.default(x,lag=1,differences=1,...)
package:base:::bio7:::diff.POSIXt(x,lag=1,differences=1,...)
package:base:::bio7:::difftime(time1,time2,tz,units=c("auto","secs","mins","hours","days","weeks"))
package:base:::bio7:::digamma(x)
package:base:::bio7:::dim(x)
package:base:::bio7:::dim.data.frame(x)
package:base:::bio7:::dim<-(x,value)
package:base:::bio7:::dimnames(x)
package:base:::bio7:::dimnames.data.frame(x)
package:base:::bio7:::dimnames<-(x,value)
package:base:::bio7:::dimnames<-.data.frame(x,value)
package:base:::bio7:::dir(path=".",pattern=NULL,all.files=FALSE,full.names=FALSE,recursive=FALSE,ignore.case=FALSE,include.dirs=FALSE,no..=FALSE)
package:base:::bio7:::dir.create(path,showWarnings=TRUE,recursive=FALSE,mode="0777")
package:base:::bio7:::dirname(path)
package:base:::bio7:::do.call(what,args,quote=FALSE,envir=parent.frame())
package:base:::bio7:::dontCheck(x)
package:base:::bio7:::double(length=0)
package:base:::bio7:::dput(x,file="",control=c("keepNA","keepInteger","showAttributes"))
package:base:::bio7:::dQuote(x)
package:base:::bio7:::drop(x)
package:base:::bio7:::droplevels(x,...)
package:base:::bio7:::droplevels.data.frame(x,except=NULL,...)
package:base:::bio7:::droplevels.factor(x,...)
package:base:::bio7:::dump(list,file="dumpdata.R",append=FALSE,control="all",envir=parent.frame(),evaluate=TRUE)
package:base:::bio7:::duplicated(x,incomparables=FALSE,...)
package:base:::bio7:::duplicated.array(x,incomparables=FALSE,MARGIN=1,fromLast=FALSE,...)
package:base:::bio7:::duplicated.data.frame(x,incomparables=FALSE,fromLast=FALSE,...)
package:base:::bio7:::duplicated.default(x,incomparables=FALSE,fromLast=FALSE,nmax=NA,...)
package:base:::bio7:::duplicated.matrix(x,incomparables=FALSE,MARGIN=1,fromLast=FALSE,...)
package:base:::bio7:::duplicated.numeric_version(x,incomparables=FALSE,...)
package:base:::bio7:::duplicated.POSIXlt(x,incomparables=FALSE,...)
package:base:::bio7:::dyn.load(x,local=TRUE,now=TRUE,...)
package:base:::bio7:::dyn.unload(x)
package:base:::bio7:::eapply(env,FUN,...,all.names=FALSE,USE.NAMES=TRUE)
package:base:::bio7:::eigen(x,symmetric,only.values=FALSE,EISPACK=FALSE)
package:base:::bio7:::emptyenv()
package:base:::bio7:::enc2native(x)
package:base:::bio7:::enc2utf8(x)
package:base:::bio7:::encodeString(x,width=0,quote="",na.encode=TRUE,justify=c("left","right","centre","none"))
package:base:::bio7:::Encoding(x)
package:base:::bio7:::Encoding<-(x,value)
package:base:::bio7:::enquote(cl)
package:base:::bio7:::env.profile(env)
package:base:::bio7:::environment(fun=NULL)
package:base:::bio7:::environment<-(fun,value)
package:base:::bio7:::environmentIsLocked(env)
package:base:::bio7:::environmentName(env)
package:base:::bio7:::eval(expr,envir=parent.frame(),enclos=if(is.list(envir)||is.pairlist(envir))parent.frame()elsebaseenv())
package:base:::bio7:::eval.parent(expr,n=1)
package:base:::bio7:::evalq(expr,envir=parent.frame(),enclos=if(is.list(envir)||is.pairlist(envir))parent.frame()elsebaseenv())
package:base:::bio7:::exists(x,where=-1,envir=if(missing(frame))as.environment(where)elsesys.frame(frame),frame,mode="any",inherits=TRUE)
package:base:::bio7:::exp(x)
package:base:::bio7:::expand.grid(...,KEEP.OUT.ATTRS=TRUE,stringsAsFactors=TRUE)
package:base:::bio7:::expm1(x)
package:base:::bio7:::expression(...)
package:base:::bio7:::FNA
package:base:::bio7:::factor(x=character(),levels,labels=levels,exclude=NA,ordered=is.ordered(x),nmax=NA)
package:base:::bio7:::factorial(x)
package:base:::bio7:::fifo(description,open="",blocking=FALSE,encoding=getOption("encoding"))
package:base:::bio7:::file(description="",open="",blocking=TRUE,encoding=getOption("encoding"),raw=FALSE)
package:base:::bio7:::file.access(names,mode=0)
package:base:::bio7:::file.append(file1,file2)
package:base:::bio7:::file.choose(new=FALSE)
package:base:::bio7:::file.copy(from,to,overwrite=recursive,recursive=FALSE,copy.mode=TRUE,copy.date=FALSE)
package:base:::bio7:::file.create(...,showWarnings=TRUE)
package:base:::bio7:::file.exists(...)
package:base:::bio7:::file.info(...)
package:base:::bio7:::file.link(from,to)
package:base:::bio7:::file.path(...,fsep=.Platform$file.sep)
package:base:::bio7:::file.remove(...)
package:base:::bio7:::file.rename(from,to)
package:base:::bio7:::file.show(...,header=rep("",nfiles),title="RInformation",delete.file=FALSE,pager=getOption("pager"),encoding="")
package:base:::bio7:::file.symlink(from,to)
package:base:::bio7:::Filter(f,x)
package:base:::bio7:::Find(f,x,right=FALSE,nomatch=NULL)
package:base:::bio7:::find.package(package=NULL,lib.loc=NULL,quiet=FALSE,verbose=getOption("verbose"))
package:base:::bio7:::findInterval(x,vec,rightmost.closed=FALSE,all.inside=FALSE)
package:base:::bio7:::findPackageEnv(info)
package:base:::bio7:::findRestart(name,cond=NULL)
package:base:::bio7:::floor(x)
package:base:::bio7:::flush(con)
package:base:::bio7:::flush.connection(con)
package:base:::bio7:::forNULL
package:base:::bio7:::force(x)
package:base:::bio7:::formals(fun=sys.(sys.parent()))
package:base:::bio7:::formals<-(fun,envir=environment(fun),value)
package:base:::bio7:::format(x,...)
package:base:::bio7:::format.AsIs(x,width=12,...)
package:base:::bio7:::format.data.frame(x,...,justify="none")
package:base:::bio7:::format.Date(x,...)
package:base:::bio7:::format.default(x,trim=FALSE,digits=NULL,nsmall=0,justify=c("left","right","centre","none"),width=NULL,na.encode=TRUE,scientific=NA,big.mark="",big.interval=3,small.mark="",small.interval=5,decimal.mark=".",zero.print=NULL,drop0trailing=FALSE,...)
package:base:::bio7:::format.difftime(x,...)
package:base:::bio7:::format.factor(x,...)
package:base:::bio7:::format.hexmode(x,width=NULL,upper.case=FALSE,...)
package:base:::bio7:::format.info(x,digits=NULL,nsmall=0)
package:base:::bio7:::format.libraryIQR(x,...)
package:base:::bio7:::format.numeric_version(x,...)
package:base:::bio7:::format.octmode(x,width=NULL,...)
package:base:::bio7:::format.packageInfo(x,...)
package:base:::bio7:::format.POSIXct(x,format="",tz="",usetz=FALSE,...)
package:base:::bio7:::format.POSIXlt(x,format="",usetz=FALSE,...)
package:base:::bio7:::format.pval(pv,digits=max(1,getOption("digits")-2),eps=.Machine$double.eps,na.form="NA",...)
package:base:::bio7:::format.summaryDefault(x,...)
package:base:::bio7:::formatC(x,digits=NULL,width=NULL,format=NULL,flag="",mode=NULL,big.mark="",big.interval=3,small.mark="",small.interval=5,decimal.mark=".",preserve.width="individual",zero.print=NULL,drop0trailing=FALSE)
package:base:::bio7:::formatDL(x,y,style=c("table","list"),width=0.9*getOption("width"),indent=NULL)
package:base:::bio7:::forwardsolve(l,x,k=ncol(l),upper.tri=FALSE,transpose=FALSE)
package:base:::bio7:::functionNULL
package:base:::bio7:::gamma(x)
package:base:::bio7:::gc(verbose=getOption("verbose"),reset=FALSE)
package:base:::bio7:::gc.time(on=TRUE)
package:base:::bio7:::gcinfo(verbose)
package:base:::bio7:::gctorture(on=TRUE)
package:base:::bio7:::gctorture2(step,wait=step,inhibit_release=FALSE)
package:base:::bio7:::get(x,pos=-1,envir=as.environment(pos),mode="any",inherits=TRUE)
package:base:::bio7:::getAllConnections()
package:base:::bio7:::getCallingDLL(f=sys.(-1),doStop=FALSE)
package:base:::bio7:::getCallingDLLe(e)
package:base:::bio7:::getConnection(what)
package:base:::bio7:::getDLLRegisteredRoutines(dll,addNames=TRUE)
package:base:::bio7:::getDLLRegisteredRoutines.character(dll,addNames=TRUE)
package:base:::bio7:::getDLLRegisteredRoutines.DLLInfo(dll,addNames=TRUE)
package:base:::bio7:::getElement(object,name)
package:base:::bio7:::geterrmessage()
package:base:::bio7:::getExportedValue(ns,name)
package:base:::bio7:::getHook(hookName)
package:base:::bio7:::getLoadedDLLs()
package:base:::bio7:::getNamespace(name)
package:base:::bio7:::getNamespaceExports(ns)
package:base:::bio7:::getNamespaceImports(ns)
package:base:::bio7:::getNamespaceInfo(ns,which)
package:base:::bio7:::getNamespaceName(ns)
package:base:::bio7:::getNamespaceUsers(ns)
package:base:::bio7:::getNamespaceVersion(ns)
package:base:::bio7:::getNativeSymbolInfo(name,PACKAGE,unlist=TRUE,withRegistrationInfo=FALSE)
package:base:::bio7:::getOption(x,default=NULL)
package:base:::bio7:::getRversion()
package:base:::bio7:::getSrcLines(srcfile,first,last)
package:base:::bio7:::getTaskCallbackNames()
package:base:::bio7:::gettext(...,domain=NULL)
package:base:::bio7:::gettextf(fmt,...,domain=NULL)
package:base:::bio7:::getwd()
package:base:::bio7:::gl(n,k,length=n*k,labels=seq_len(n),ordered=FALSE)
package:base:::bio7:::globalenv()
package:base:::bio7:::gregexpr(pattern,text,ignore.case=FALSE,perl=FALSE,fixed=FALSE,useBytes=FALSE)
package:base:::bio7:::grep(pattern,x,ignore.case=FALSE,perl=FALSE,value=FALSE,fixed=FALSE,useBytes=FALSE,invert=FALSE)
package:base:::bio7:::grepl(pattern,x,ignore.case=FALSE,perl=FALSE,fixed=FALSE,useBytes=FALSE)
package:base:::bio7:::grepRaw(pattern,x,offset=1,ignore.case=FALSE,value=FALSE,fixed=FALSE,all=FALSE,invert=FALSE)
package:base:::bio7:::gsub(pattern,replacement,x,ignore.case=FALSE,perl=FALSE,fixed=FALSE,useBytes=FALSE)
package:base:::bio7:::gzcon(con,level=6,allowNonCompressed=TRUE)
package:base:::bio7:::gzfile(description,open="",encoding=getOption("encoding"),compression=6)
package:base:::bio7:::I(x)
package:base:::bio7:::iconv(x,from="",to="",sub=NA,mark=TRUE,toRaw=FALSE)
package:base:::bio7:::iconvlist()
package:base:::bio7:::icuSetCollate(...)
package:base:::bio7:::identical(x,y,num.eq=TRUE,single.NA=TRUE,attrib.as.set=TRUE,ignore.bytecode=TRUE,ignore.environment=FALSE)
package:base:::bio7:::identity(x)
package:base:::bio7:::ifNULL
package:base:::bio7:::ifelse(test,yes,no)
package:base:::bio7:::Im(z)
package:base:::bio7:::importIntoEnv(impenv,impnames,expenv,expnames)
package:base:::bio7:::inherits(x,what,which=FALSE)
package:base:::bio7:::integer(length=0)
package:base:::bio7:::interaction(...,drop=FALSE,sep=".",lex.order=FALSE)
package:base:::bio7:::interactive()
package:base:::bio7:::intersect(x,y)
package:base:::bio7:::intToBits(x)
package:base:::bio7:::intToUtf8(x,multiple=FALSE)
package:base:::bio7:::inverse.rle(x,...)
package:base:::bio7:::invisible(x)
package:base:::bio7:::invokeRestart(r,...)
package:base:::bio7:::invokeRestartInteractively(r)
package:base:::bio7:::is.array(x)
package:base:::bio7:::is.atomic(x)
package:base:::bio7:::is.call(x)
package:base:::bio7:::is.character(x)
package:base:::bio7:::is.complex(x)
package:base:::bio7:::is.data.frame(x)
package:base:::bio7:::is.double(x)
package:base:::bio7:::is.element(el,set)
package:base:::bio7:::is.environment(x)
package:base:::bio7:::is.expression(x)
package:base:::bio7:::is.factor(x)
package:base:::bio7:::is.finite(x)
package:base:::bio7:::is.function(x)
package:base:::bio7:::is.infinite(x)
package:base:::bio7:::is.integer(x)
package:base:::bio7:::is.language(x)
package:base:::bio7:::is.list(x)
package:base:::bio7:::is.loaded(symbol,PACKAGE="",type="")
package:base:::bio7:::is.logical(x)
package:base:::bio7:::is.matrix(x)
package:base:::bio7:::is.na(x)
package:base:::bio7:::is.na.data.frame(x)
package:base:::bio7:::is.na.numeric_version(x)
package:base:::bio7:::is.na.POSIXlt(x)
package:base:::bio7:::is.na<-(x,value)
package:base:::bio7:::is.na<-.default(x,value)
package:base:::bio7:::is.na<-.factor(x,value)
package:base:::bio7:::is.name(x)
package:base:::bio7:::is.nan(x)
package:base:::bio7:::is.null(x)
package:base:::bio7:::is.numeric(x)
package:base:::bio7:::is.numeric.Date(x)
package:base:::bio7:::is.numeric.difftime(x)
package:base:::bio7:::is.numeric.POSIXt(x)
package:base:::bio7:::is.numeric_version(x)
package:base:::bio7:::is.object(x)
package:base:::bio7:::is.ordered(x)
package:base:::bio7:::is.package_version(x)
package:base:::bio7:::is.pairlist(x)
package:base:::bio7:::is.primitive(x)
package:base:::bio7:::is.qr(x)
package:base:::bio7:::is.R()
package:base:::bio7:::is.raw(x)
package:base:::bio7:::is.recursive(x)
package:base:::bio7:::is.single(x)
package:base:::bio7:::is.symbol(x)
package:base:::bio7:::is.table(x)
package:base:::bio7:::is.unsorted(x,na.rm=FALSE,strictly=FALSE)
package:base:::bio7:::is.vector(x,mode="any")
package:base:::bio7:::isatty(con)
package:base:::bio7:::isBaseNamespace(ns)
package:base:::bio7:::isdebugged(fun)
package:base:::bio7:::isIncomplete(con)
package:base:::bio7:::isNamespace(ns)
package:base:::bio7:::ISOdate(year,month,day,hour=12,min=0,sec=0,tz="GMT")
package:base:::bio7:::ISOdatetime(year,month,day,hour,min,sec,tz="")
package:base:::bio7:::isOpen(con,rw="")
package:base:::bio7:::isRestart(x)
package:base:::bio7:::isS4(object)
package:base:::bio7:::isSeekable(con)
package:base:::bio7:::isSymmetric(object,...)
package:base:::bio7:::isSymmetric.matrix(object,tol=100*.Machine$double.eps,...)
package:base:::bio7:::isTRUE(x)
package:base:::bio7:::jitter(x,factor=1,amount=NULL)
package:base:::bio7:::julian(x,...)
package:base:::bio7:::julian.Date(x,origin=as.Date("1970-01-01"),...)
package:base:::bio7:::julian.POSIXt(x,origin=as.POSIXct("1970-01-01",tz="GMT"),...)
package:base:::bio7:::kappa(z,...)
package:base:::bio7:::kappa.default(z,exact=FALSE,norm=NULL,method=c("qr","direct"),...)
package:base:::bio7:::kappa.lm(z,...)
package:base:::bio7:::kappa.qr(z,...)
package:base:::bio7:::kronecker(X,Y,FUN="*",make.dimnames=FALSE,...)
package:base:::bio7:::l10n_info()
package:base:::bio7:::La.svd(x,nu=min(n,p),nv=min(n,p))
package:base:::bio7:::La_version()
package:base:::bio7:::labels(object,...)
package:base:::bio7:::labels.default(object,...)
package:base:::bio7:::lapply(X,FUN,...)
package:base:::bio7:::lazyLoad(filebase,envir=parent.frame(),filter)
package:base:::bio7:::lazyLoadDBexec(filebase,fun,filter)
package:base:::bio7:::lazyLoadDBfetch(key,file,compressed,hook)
package:base:::bio7:::lbeta(a,b)
package:base:::bio7:::lchoose(n,k)
package:base:::bio7:::length(x)
package:base:::bio7:::length.POSIXlt(x)
package:base:::bio7:::length<-(x,value)
package:base:::bio7:::length<-.factor(x,value)
package:base:::bio7:::lettersNA
package:base:::bio7:::LETTERSNA
package:base:::bio7:::levels(x)
package:base:::bio7:::levels.default(x)
package:base:::bio7:::levels<-(x,value)
package:base:::bio7:::levels<-.factor(x,value)
package:base:::bio7:::lfactorial(x)
package:base:::bio7:::lgamma(x)
package:base:::bio7:::library(package,help,pos=2,lib.loc=NULL,character.only=FALSE,logical.return=FALSE,warn.conflicts=TRUE,quietly=FALSE,verbose=getOption("verbose"))
package:base:::bio7:::library.dynam(chname,package,lib.loc,verbose=getOption("verbose"),file.ext=.Platform$dynlib.ext,...)
package:base:::bio7:::library.dynam.unload(chname,libpath,verbose=getOption("verbose"),file.ext=.Platform$dynlib.ext)
package:base:::bio7:::licence()
package:base:::bio7:::license()
package:base:::bio7:::list(...)
package:base:::bio7:::list.dirs(path=".",full.names=TRUE,recursive=TRUE)
package:base:::bio7:::list.files(path=".",pattern=NULL,all.files=FALSE,full.names=FALSE,recursive=FALSE,ignore.case=FALSE,include.dirs=FALSE,no..=FALSE)
package:base:::bio7:::list2env(x,envir=NULL,parent=parent.frame(),hash=(length(x)>100),size=max(29,length(x)))
package:base:::bio7:::load(file,envir=parent.frame(),verbose=FALSE)
package:base:::bio7:::loadedNamespaces()
package:base:::bio7:::loadingNamespaceInfo()
package:base:::bio7:::loadNamespace(package,lib.loc=NULL,keep.source=getOption("keep.source.pkgs"),partial=FALSE,versionCheck=NULL)
package:base:::bio7:::local(expr,envir=new.env())
package:base:::bio7:::lockBinding(sym,env)
package:base:::bio7:::lockEnvironment(env,bindings=FALSE)
package:base:::bio7:::log(x,base=exp(1))
package:base:::bio7:::log10(x)
package:base:::bio7:::log1p(x)
package:base:::bio7:::log2(x)
package:base:::bio7:::logb(x,base=exp(1))
package:base:::bio7:::logical(length=0)
package:base:::bio7:::lower.tri(x,diag=FALSE)
package:base:::bio7:::ls(name,pos=-1,envir=as.environment(pos),all.names=FALSE,pattern)
package:base:::bio7:::make.names(names,unique=FALSE,allow_=TRUE)
package:base:::bio7:::make.unique(names,sep=".")
package:base:::bio7:::makeActiveBinding(sym,fun,env)
package:base:::bio7:::Map(f,...)
package:base:::bio7:::mapply(FUN,...,MoreArgs=NULL,SIMPLIFY=TRUE,USE.NAMES=TRUE)
package:base:::bio7:::margin.table(x,margin=NULL)
package:base:::bio7:::mat.or.vec(nr,nc)
package:base:::bio7:::match(x,table,nomatch=NA,incomparables=NULL)
package:base:::bio7:::match.arg(arg,choices,several.ok=FALSE)
package:base:::bio7:::match.call(definition=NULL,call=sys.call(sys.parent()),expand.dots=TRUE)
package:base:::bio7:::match.fun(FUN,descend=TRUE)
package:base:::bio7:::Math.data.frame(x,...)
package:base:::bio7:::Math.Date(x,...)
package:base:::bio7:::Math.difftime(x,...)
package:base:::bio7:::Math.factor(x,...)
package:base:::bio7:::Math.POSIXt(x,...)
package:base:::bio7:::matrix(data=NA,nrow=1,ncol=1,byrow=FALSE,dimnames=NULL)
package:base:::bio7:::max(...,na.rm=FALSE)
package:base:::bio7:::max.col(m,ties.method=c("random","first","last"))
package:base:::bio7:::mean(x,...)
package:base:::bio7:::mean.Date(x,...)
package:base:::bio7:::mean.default(x,trim=0,na.rm=FALSE,...)
package:base:::bio7:::mean.difftime(x,...)
package:base:::bio7:::mean.POSIXct(x,...)
package:base:::bio7:::mean.POSIXlt(x,...)
package:base:::bio7:::mem.limits(nsize=NA,vsize=NA)
package:base:::bio7:::memCompress(from,type=c("gzip","bzip2","xz","none"))
package:base:::bio7:::memDecompress(from,type=c("unknown","gzip","bzip2","xz","none"),asChar=FALSE)
package:base:::bio7:::memory.profile()
package:base:::bio7:::merge(x,y,...)
package:base:::bio7:::merge.data.frame(x,y,by=intersect(names(x),names(y)),by.x=by,by.y=by,all=FALSE,all.x=all,all.y=all,sort=TRUE,suffixes=c(".x",".y"),incomparables=NULL,...)
package:base:::bio7:::merge.default(x,y,...)
package:base:::bio7:::message(...,domain=NULL,appendLF=TRUE)
package:base:::bio7:::mget(x,envir=as.environment(-1),mode="any",ifnotfound,inherits=FALSE)
package:base:::bio7:::min(...,na.rm=FALSE)
package:base:::bio7:::missing(x)
package:base:::bio7:::Mod(z)
package:base:::bio7:::mode(x)
package:base:::bio7:::mode<-(x,value)
package:base:::bio7:::month.abbNA
package:base:::bio7:::month.nameNA
package:base:::bio7:::months(x,abbreviate)
package:base:::bio7:::months.Date(x,abbreviate=FALSE)
package:base:::bio7:::months.POSIXt(x,abbreviate=FALSE)
package:base:::bio7:::mostattributes<-(obj,value)
package:base:::bio7:::names(x)
package:base:::bio7:::names.POSIXlt(x)
package:base:::bio7:::names<-(x,value)
package:base:::bio7:::names<-.POSIXlt(x,value)
package:base:::bio7:::namespaceExport(ns,vars)
package:base:::bio7:::namespaceImport(self,...,from=NULL)
package:base:::bio7:::namespaceImportClasses(self,ns,vars,from=NULL)
package:base:::bio7:::namespaceImportFrom(self,ns,vars,generics,packages,from="non-packageenvironment")
package:base:::bio7:::namespaceImportMethods(self,ns,vars,from=NULL)
package:base:::bio7:::nargs()
package:base:::bio7:::nchar(x,type="chars",allowNA=FALSE)
package:base:::bio7:::ncol(x)
package:base:::bio7:::NCOL(x)
package:base:::bio7:::Negate(f)
package:base:::bio7:::new.env(hash=TRUE,parent=parent.frame(),size=29)
package:base:::bio7:::nextNULL
package:base:::bio7:::NextMethod(generic=NULL,object=NULL,...)
package:base:::bio7:::ngettext(n,msg1,msg2,domain=NULL)
package:base:::bio7:::nlevels(x)
package:base:::bio7:::noquote(obj)
package:base:::bio7:::norm(x,type=c("O","I","F","M","2"))
package:base:::bio7:::normalizePath(path,winslash="\\",mustWork=NA)
package:base:::bio7:::nrow(x)
package:base:::bio7:::NROW(x)
package:base:::bio7:::numeric(length=0)
package:base:::bio7:::numeric_version(x,strict=TRUE)
package:base:::bio7:::nzchar(x)
package:base:::bio7:::objects(name,pos=-1,envir=as.environment(pos),all.names=FALSE,pattern)
package:base:::bio7:::oldClass(x)
package:base:::bio7:::oldClass<-(x,value)
package:base:::bio7:::OlsonNames()
package:base:::bio7:::on.exit(expr=NULL,add=FALSE)
package:base:::bio7:::open(con,...)
package:base:::bio7:::open.connection(con,open="r",blocking=TRUE,...)
package:base:::bio7:::open.srcfile(con,line,...)
package:base:::bio7:::open.srcfilealias(con,line,...)
package:base:::bio7:::open.srcfilecopy(con,line,...)
package:base:::bio7:::Ops.data.frame(e1,e2=NULL)
package:base:::bio7:::Ops.Date(e1,e2)
package:base:::bio7:::Ops.difftime(e1,e2)
package:base:::bio7:::Ops.factor(e1,e2)
package:base:::bio7:::Ops.numeric_version(e1,e2)
package:base:::bio7:::Ops.ordered(e1,e2)
package:base:::bio7:::Ops.POSIXt(e1,e2)
package:base:::bio7:::options(...)
package:base:::bio7:::order(...,na.last=TRUE,decreasing=FALSE)
package:base:::bio7:::ordered(x,...)
package:base:::bio7:::outer(X,Y,FUN="*",...)
package:base:::bio7:::package_version(x,strict=TRUE)
package:base:::bio7:::packageEvent(pkgname,event=c("onLoad","attach","detach","onUnload"))
package:base:::bio7:::packageHasNamespace(package,package.lib)
package:base:::bio7:::packageStartupMessage(...,domain=NULL,appendLF=TRUE)
package:base:::bio7:::packBits(x,type=c("raw","integer"))
package:base:::bio7:::pairlist(...)
package:base:::bio7:::parent.env(env)
package:base:::bio7:::parent.env<-(env,value)
package:base:::bio7:::parent.frame(n=1)
package:base:::bio7:::parse(file="",n=NULL,text=NULL,prompt="?",keep.source=getOption("keep.source"),srcfile=NULL,encoding="unknown")
package:base:::bio7:::parseNamespaceFile(package,package.lib,mustExist=TRUE)
package:base:::bio7:::paste(...,sep="",collapse=NULL)
package:base:::bio7:::paste0(...,collapse=NULL)
package:base:::bio7:::path.expand(path)
package:base:::bio7:::path.package(package=NULL,quiet=FALSE)
package:base:::bio7:::piNA
package:base:::bio7:::pipe(description,open="",encoding=getOption("encoding"))
package:base:::bio7:::pmatch(x,table,nomatch=NA,duplicates.ok=FALSE)
package:base:::bio7:::pmax(...,na.rm=FALSE)
package:base:::bio7:::pmax.int(...,na.rm=FALSE)
package:base:::bio7:::pmin(...,na.rm=FALSE)
package:base:::bio7:::pmin.int(...,na.rm=FALSE)
package:base:::bio7:::polyroot(z)
package:base:::bio7:::pos.to.env(x)
package:base:::bio7:::Position(f,x,right=FALSE,nomatch=NA)
package:base:::bio7:::pretty(x,...)
package:base:::bio7:::pretty.default(x,n=5,min.n=n%/%3,shrink.sml=0.75,high.u.bias=1.5,u5.bias=0.5+1.5*high.u.bias,eps.correct=0,...)
package:base:::bio7:::prettyNum(x,big.mark="",big.interval=3,small.mark="",small.interval=5,decimal.mark=".",preserve.width=c("common","individual","none"),zero.print=NULL,drop0trailing=FALSE,is.cmplx=NA,...)
package:base:::bio7:::print(x,...)
package:base:::bio7:::print.AsIs(x,...)
package:base:::bio7:::print.by(x,...,vsep)
package:base:::bio7:::print.condition(x,...)
package:base:::bio7:::print.connection(x,...)
package:base:::bio7:::print.data.frame(x,...,digits=NULL,quote=FALSE,right=TRUE,row.names=TRUE)
package:base:::bio7:::print.Date(x,max=NULL,...)
package:base:::bio7:::print.default(x,digits=NULL,quote=TRUE,na.print=NULL,print.gap=NULL,right=FALSE,max=NULL,useSource=TRUE,...)
package:base:::bio7:::print.difftime(x,digits=getOption("digits"),...)
package:base:::bio7:::print.DLLInfo(x,...)
package:base:::bio7:::print.DLLInfoList(x,...)
package:base:::bio7:::print.DLLRegisteredRoutines(x,...)
package:base:::bio7:::print.factor(x,quote=FALSE,max.levels=NULL,width=getOption("width"),...)
package:base:::bio7:::print.function(x,useSource=TRUE,...)
package:base:::bio7:::print.hexmode(x,...)
package:base:::bio7:::print.libraryIQR(x,...)
package:base:::bio7:::print.listof(x,...)
package:base:::bio7:::print.NativeRoutineList(x,...)
package:base:::bio7:::print.noquote(x,...)
package:base:::bio7:::print.numeric_version(x,...)
package:base:::bio7:::print.octmode(x,...)
package:base:::bio7:::print.packageInfo(x,...)
package:base:::bio7:::print.POSIXct(x,...)
package:base:::bio7:::print.POSIXlt(x,...)
package:base:::bio7:::print.proc_time(x,...)
package:base:::bio7:::print.restart(x,...)
package:base:::bio7:::print.rle(x,digits=getOption("digits"),prefix="",...)
package:base:::bio7:::print.simple.list(x,...)
package:base:::bio7:::print.srcfile(x,...)
package:base:::bio7:::print.srcref(x,useSource=TRUE,...)
package:base:::bio7:::print.summary.table(x,digits=max(1,getOption("digits")-3),...)
package:base:::bio7:::print.summaryDefault(x,...)
package:base:::bio7:::print.table(x,digits=getOption("digits"),quote=FALSE,na.print="",zero.print="0",justify="none",...)
package:base:::bio7:::print.warnings(x,...)
package:base:::bio7:::prmatrix(x,rowlab=dn[[1]],collab=dn[[2]],quote=TRUE,right=FALSE,na.print=NULL,...)
package:base:::bio7:::proc.time()
package:base:::bio7:::prod(...,na.rm=FALSE)
package:base:::bio7:::prop.table(x,margin=NULL)
package:base:::bio7:::provideDimnames(x,sep="",base=list(LETTERS))
package:base:::bio7:::psigamma(x,deriv=0)
package:base:::bio7:::pushBack(data,connection,newLine=TRUE,encoding=c("","bytes","UTF-8"))
package:base:::bio7:::pushBackLength(connection)
package:base:::bio7:::q(save="default",status=0,runLast=TRUE)
package:base:::bio7:::qr(x,...)
package:base:::bio7:::qr.coef(qr,y)
package:base:::bio7:::qr.default(x,tol=1e-07,LAPACK=FALSE,...)
package:base:::bio7:::qr.fitted(qr,y,k=qr$rank)
package:base:::bio7:::qr.Q(qr,complete=FALSE,Dvec)
package:base:::bio7:::qr.qty(qr,y)
package:base:::bio7:::qr.qy(qr,y)
package:base:::bio7:::qr.R(qr,complete=FALSE,...)
package:base:::bio7:::qr.resid(qr,y)
package:base:::bio7:::qr.solve(a,b,tol=1e-07)
package:base:::bio7:::qr.X(qr,complete=FALSE,ncol=if(complete)nrow(R)elsemin(dim(R)))
package:base:::bio7:::quarters(x,abbreviate)
package:base:::bio7:::quarters.Date(x,...)
package:base:::bio7:::quarters.POSIXt(x,...)
package:base:::bio7:::quit(save="default",status=0,runLast=TRUE)
package:base:::bio7:::quote(expr)
package:base:::bio7:::R.home(component="home")
package:base:::bio7:::R.versionNA
package:base:::bio7:::R.Version()
package:base:::bio7:::R.version.stringNA
package:base:::bio7:::R_system_version(x,strict=TRUE)
package:base:::bio7:::range(...,na.rm=FALSE)
package:base:::bio7:::range.default(...,na.rm=FALSE,finite=FALSE)
package:base:::bio7:::rank(x,na.last=TRUE,ties.method=c("average","first","random","max","min"))
package:base:::bio7:::rapply(object,f,classes="ANY",deflt=NULL,how=c("unlist","replace","list"),...)
package:base:::bio7:::raw(length=0)
package:base:::bio7:::rawConnection(object,open="r")
package:base:::bio7:::rawConnectionValue(con)
package:base:::bio7:::rawShift(x,n)
package:base:::bio7:::rawToBits(x)
package:base:::bio7:::rawToChar(x,multiple=FALSE)
package:base:::bio7:::rbind(...,deparse.level=1)
package:base:::bio7:::rbind.data.frame(...,deparse.level=1)
package:base:::bio7:::rcond(x,norm=c("O","I","1"),triangular=FALSE,...)
package:base:::bio7:::Re(z)
package:base:::bio7:::read.dcf(file,fields=NULL,all=FALSE,keep.white=NULL)
package:base:::bio7:::readBin(con,what,n=1,size=NA,signed=TRUE,endian=.Platform$endian)
package:base:::bio7:::readChar(con,nchars,useBytes=FALSE)
package:base:::bio7:::readline(prompt="")
package:base:::bio7:::readLines(con=stdin(),n=-1,ok=TRUE,warn=TRUE,encoding="unknown",skipNul=FALSE)
package:base:::bio7:::readRDS(file,refhook=NULL)
package:base:::bio7:::readRenviron(path)
package:base:::bio7:::Recall(...)
package:base:::bio7:::Reduce(f,x,init,right=FALSE,accumulate=FALSE)
package:base:::bio7:::reg.finalizer(e,f,onexit=FALSE)
package:base:::bio7:::regexec(pattern,text,ignore.case=FALSE,fixed=FALSE,useBytes=FALSE)
package:base:::bio7:::regexpr(pattern,text,ignore.case=FALSE,perl=FALSE,fixed=FALSE,useBytes=FALSE)
package:base:::bio7:::registerS3method(genname,class,method,envir=parent.frame())
package:base:::bio7:::registerS3methods(info,package,env)
package:base:::bio7:::regmatches(x,m,invert=FALSE)
package:base:::bio7:::regmatches<-(x,m,invert=FALSE,value)
package:base:::bio7:::remove(...,list=character(),pos=-1,envir=as.environment(pos),inherits=FALSE)
package:base:::bio7:::removeTaskCallback(id)
package:base:::bio7:::rep(x,...)
package:base:::bio7:::rep.Date(x,...)
package:base:::bio7:::rep.factor(x,...)
package:base:::bio7:::rep.int(x,times)
package:base:::bio7:::rep.numeric_version(x,...)
package:base:::bio7:::rep.POSIXct(x,...)
package:base:::bio7:::rep.POSIXlt(x,...)
package:base:::bio7:::rep_len(x,length.out)
package:base:::bio7:::repeatNULL
package:base:::bio7:::replace(x,list,values)
package:base:::bio7:::replicate(n,expr,simplify="array")
package:base:::bio7:::require(package,lib.loc=NULL,quietly=FALSE,warn.conflicts=TRUE,character.only=FALSE)
package:base:::bio7:::requireNamespace(package,...,quietly=FALSE)
package:base:::bio7:::restartDescription(r)
package:base:::bio7:::restartFormals(r)
package:base:::bio7:::retracemem(x,previous=NULL)
package:base:::bio7:::returnNULL
package:base:::bio7:::rev(x)
package:base:::bio7:::rev.default(x)
package:base:::bio7:::rle(x)
package:base:::bio7:::rm(...,list=character(),pos=-1,envir=as.environment(pos),inherits=FALSE)
package:base:::bio7:::RNGkind(kind=NULL,normal.kind=NULL)
package:base:::bio7:::RNGversion(vstr)
package:base:::bio7:::round(x,digits=0)
package:base:::bio7:::round.Date(x,...)
package:base:::bio7:::round.POSIXt(x,units=c("secs","mins","hours","days"))
package:base:::bio7:::row(x,as.factor=FALSE)
package:base:::bio7:::row.names(x)
package:base:::bio7:::row.names.data.frame(x)
package:base:::bio7:::row.names.default(x)
package:base:::bio7:::row.names<-(x,value)
package:base:::bio7:::row.names<-.data.frame(x,value)
package:base:::bio7:::row.names<-.default(x,value)
package:base:::bio7:::rowMeans(x,na.rm=FALSE,dims=1)
package:base:::bio7:::rownames(x,do.NULL=TRUE,prefix="row")
package:base:::bio7:::rownames<-(x,value)
package:base:::bio7:::rowsum(x,group,reorder=TRUE,...)
package:base:::bio7:::rowsum.data.frame(x,group,reorder=TRUE,na.rm=FALSE,...)
package:base:::bio7:::rowsum.default(x,group,reorder=TRUE,na.rm=FALSE,...)
package:base:::bio7:::rowSums(x,na.rm=FALSE,dims=1)
package:base:::bio7:::sample(x,size,replace=FALSE,prob=NULL)
package:base:::bio7:::sample.int(n,size=n,replace=FALSE,prob=NULL)
package:base:::bio7:::sapply(X,FUN,...,simplify=TRUE,USE.NAMES=TRUE)
package:base:::bio7:::save(...,list=character(),file=stop("'file'mustbespecified"),ascii=FALSE,version=NULL,envir=parent.frame(),compress=!ascii,compression_level,eval.promises=TRUE,precheck=TRUE)
package:base:::bio7:::save.image(file=".RData",version=NULL,ascii=FALSE,compress=!ascii,safe=TRUE)
package:base:::bio7:::saveRDS(object,file="",ascii=FALSE,version=NULL,compress=TRUE,refhook=NULL)
package:base:::bio7:::scale(x,center=TRUE,scale=TRUE)
package:base:::bio7:::scale.default(x,center=TRUE,scale=TRUE)
package:base:::bio7:::scan(file="",what=double(),nmax=-1,n=-1,sep="",quote=if(identical(sep,"\n"))""else"'\"",dec=".",skip=0,nlines=0,na.strings="NA",flush=FALSE,fill=FALSE,strip.white=FALSE,quiet=FALSE,blank.lines.skip=TRUE,multi.line=TRUE,comment.char="",allowEscapes=FALSE,fileEncoding="",encoding="unknown",text,skipNul=FALSE)
package:base:::bio7:::search()
package:base:::bio7:::searchpaths()
package:base:::bio7:::seek(con,...)
package:base:::bio7:::seek.connection(con,where=NA,origin="start",rw="",...)
package:base:::bio7:::seq(...)
package:base:::bio7:::seq.Date(from,to,by,length.out=NULL,along.with=NULL,...)
package:base:::bio7:::seq.default(from=1,to=1,by=((to-from)/(length.out-1)),length.out=NULL,along.with=NULL,...)
package:base:::bio7:::seq.int(from,to,by,length.out,along.with,...)
package:base:::bio7:::seq.POSIXt(from,to,by,length.out=NULL,along.with=NULL,...)
package:base:::bio7:::seq_along(along.with)
package:base:::bio7:::seq_len(length.out)
package:base:::bio7:::sequence(nvec)
package:base:::bio7:::serialize(object,connection,ascii=FALSE,xdr=TRUE,version=NULL,refhook=NULL)
package:base:::bio7:::set.seed(seed,kind=NULL,normal.kind=NULL)
package:base:::bio7:::setdiff(x,y)
package:base:::bio7:::setequal(x,y)
package:base:::bio7:::setHook(hookName,value,action=c("append","prepend","replace"))
package:base:::bio7:::setNamespaceInfo(ns,which,val)
package:base:::bio7:::setSessionTimeLimit(cpu=Inf,elapsed=Inf)
package:base:::bio7:::setTimeLimit(cpu=Inf,elapsed=Inf,transient=FALSE)
package:base:::bio7:::setwd(dir)
package:base:::bio7:::shell(cmd,shell,flag="/c",intern=FALSE,wait=TRUE,translate=FALSE,mustWork=FALSE,...)
package:base:::bio7:::shell.exec(file)
package:base:::bio7:::showConnections(all=FALSE)
package:base:::bio7:::shQuote(string,type=c("sh","csh","cmd"))
package:base:::bio7:::sign(x)
package:base:::bio7:::signalCondition(cond)
package:base:::bio7:::signif(x,digits=6)
package:base:::bio7:::simpleCondition(message,call=NULL)
package:base:::bio7:::simpleError(message,call=NULL)
package:base:::bio7:::simpleMessage(message,call=NULL)
package:base:::bio7:::simpleWarning(message,call=NULL)
package:base:::bio7:::simplify2array(x,higher=TRUE)
package:base:::bio7:::sin(x)
package:base:::bio7:::single(length=0)
package:base:::bio7:::sinh(x)
package:base:::bio7:::sink(file=NULL,append=FALSE,type=c("output","message"),split=FALSE)
package:base:::bio7:::sink.number(type=c("output","message"))
package:base:::bio7:::sinpi(x)
package:base:::bio7:::slice.index(x,MARGIN)
package:base:::bio7:::socketConnection(host="localhost",port,server=FALSE,blocking=FALSE,open="a+",encoding=getOption("encoding"),timeout=getOption("timeout"))
package:base:::bio7:::socketSelect(socklist,write=FALSE,timeout=NULL)
package:base:::bio7:::solve(a,b,...)
package:base:::bio7:::solve.default(a,b,tol=.Machine$double.eps,LINPACK=FALSE,...)
package:base:::bio7:::solve.qr(a,b,...)
package:base:::bio7:::sort(x,decreasing=FALSE,...)
package:base:::bio7:::sort.default(x,decreasing=FALSE,na.last=NA,...)
package:base:::bio7:::sort.int(x,partial=NULL,na.last=NA,decreasing=FALSE,method=c("shell","quick"),index.return=FALSE)
package:base:::bio7:::sort.list(x,partial=NULL,na.last=TRUE,decreasing=FALSE,method=c("shell","quick","radix"))
package:base:::bio7:::sort.POSIXlt(x,decreasing=FALSE,na.last=NA,...)
package:base:::bio7:::source(file,local=FALSE,echo=verbose,print.eval=echo,verbose=getOption("verbose"),prompt.echo=getOption("prompt"),max.deparse.length=150,chdir=FALSE,encoding=getOption("encoding"),continue.echo=getOption("continue"),skip.echo=0,keep.source=getOption("keep.source"))
package:base:::bio7:::split(x,f,drop=FALSE,...)
package:base:::bio7:::split.data.frame(x,f,drop=FALSE,...)
package:base:::bio7:::split.Date(x,f,drop=FALSE,...)
package:base:::bio7:::split.default(x,f,drop=FALSE,sep=".",...)
package:base:::bio7:::split.POSIXct(x,f,drop=FALSE,...)
package:base:::bio7:::split<-(x,f,drop=FALSE,...,value)
package:base:::bio7:::split<-.data.frame(x,f,drop=FALSE,...,value)
package:base:::bio7:::split<-.default(x,f,drop=FALSE,...,value)
package:base:::bio7:::sprintf(fmt,...)
package:base:::bio7:::sqrt(x)
package:base:::bio7:::sQuote(x)
package:base:::bio7:::srcfile(filename,encoding=getOption("encoding"),Enc="unknown")
package:base:::bio7:::srcfilealias(filename,srcfile)
package:base:::bio7:::srcfilecopy(filename,lines,timestamp=Sys.time(),isFile=FALSE)
package:base:::bio7:::srcref(srcfile,lloc)
package:base:::bio7:::standardGeneric(f,fdef)
package:base:::bio7:::stderr()
package:base:::bio7:::stdin()
package:base:::bio7:::stdout()
package:base:::bio7:::stop(...,call.=TRUE,domain=NULL)
package:base:::bio7:::stopifnot(...)
package:base:::bio7:::storage.mode(x)
package:base:::bio7:::storage.mode<-(x,value)
package:base:::bio7:::strftime(x,format="",tz="",usetz=FALSE,...)
package:base:::bio7:::strptime(x,format,tz="")
package:base:::bio7:::strsplit(x,split,fixed=FALSE,perl=FALSE,useBytes=FALSE)
package:base:::bio7:::strtoi(x,base=0)
package:base:::bio7:::strtrim(x,width)
package:base:::bio7:::structure(.Data,...)
package:base:::bio7:::strwrap(x,width=0.9*getOption("width"),indent=0,exdent=0,prefix="",simplify=TRUE,initial=prefix)
package:base:::bio7:::sub(pattern,replacement,x,ignore.case=FALSE,perl=FALSE,fixed=FALSE,useBytes=FALSE)
package:base:::bio7:::subset(x,...)
package:base:::bio7:::subset.data.frame(x,subset,select,drop=FALSE,...)
package:base:::bio7:::subset.default(x,subset,...)
package:base:::bio7:::subset.matrix(x,subset,select,drop=FALSE,...)
package:base:::bio7:::substitute(expr,env)
package:base:::bio7:::substr(x,start,stop)
package:base:::bio7:::substr<-(x,start,stop,value)
package:base:::bio7:::substring(text,first,last=1000000)
package:base:::bio7:::substring<-(text,first,last=1000000,value)
package:base:::bio7:::sum(...,na.rm=FALSE)
package:base:::bio7:::summary(object,...)
package:base:::bio7:::summary.connection(object,...)
package:base:::bio7:::summary.data.frame(object,maxsum=7,digits=max(3,getOption("digits")-3),...)
package:base:::bio7:::Summary.data.frame(...,na.rm)
package:base:::bio7:::summary.Date(object,digits=12,...)
package:base:::bio7:::Summary.Date(...,na.rm)
package:base:::bio7:::summary.default(object,...,digits=max(3,getOption("digits")-3))
package:base:::bio7:::Summary.difftime(...,na.rm)
package:base:::bio7:::summary.factor(object,maxsum=100,...)
package:base:::bio7:::Summary.factor(...,na.rm)
package:base:::bio7:::summary.matrix(object,...)
package:base:::bio7:::Summary.numeric_version(...,na.rm)
package:base:::bio7:::Summary.ordered(...,na.rm)
package:base:::bio7:::summary.POSIXct(object,digits=15,...)
package:base:::bio7:::Summary.POSIXct(...,na.rm)
package:base:::bio7:::summary.POSIXlt(object,digits=15,...)
package:base:::bio7:::Summary.POSIXlt(...,na.rm)
package:base:::bio7:::summary.proc_time(object,...)
package:base:::bio7:::summary.srcfile(object,...)
package:base:::bio7:::summary.srcref(object,useSource=FALSE,...)
package:base:::bio7:::summary.table(object,...)
package:base:::bio7:::suppressMessages(expr)
package:base:::bio7:::suppressPackageStartupMessages(expr)
package:base:::bio7:::suppressWarnings(expr)
package:base:::bio7:::svd(x,nu=min(n,p),nv=min(n,p),LINPACK=FALSE)
package:base:::bio7:::sweep(x,MARGIN,STATS,FUN="-",check.margin=TRUE,...)
package:base:::bio7:::switch(EXPR,...)
package:base:::bio7:::sys.call(which=0)
package:base:::bio7:::sys.calls()
package:base:::bio7:::Sys.chmod(paths,mode="0777",use_umask=TRUE)
package:base:::bio7:::Sys.Date()
package:base:::bio7:::sys.frame(which=0)
package:base:::bio7:::sys.frames()
package:base:::bio7:::sys.function(which=0)
package:base:::bio7:::Sys.getenv(x=NULL,unset="",names=NA)
package:base:::bio7:::Sys.getlocale(category="LC_ALL")
package:base:::bio7:::Sys.getpid()
package:base:::bio7:::Sys.glob(paths,dirmark=FALSE)
package:base:::bio7:::Sys.info()
package:base:::bio7:::Sys.junction(from,to)
package:base:::bio7:::sys.load.image(name,quiet)
package:base:::bio7:::Sys.localeconv()
package:base:::bio7:::sys.nframe()
package:base:::bio7:::sys.on.exit()
package:base:::bio7:::sys.parent(n=1)
package:base:::bio7:::sys.parents()
package:base:::bio7:::Sys.readlink(paths)
package:base:::bio7:::sys.save.image(name)
package:base:::bio7:::Sys.setenv(...)
package:base:::bio7:::Sys.setFileTime(path,time)
package:base:::bio7:::Sys.setlocale(category="LC_ALL",locale="")
package:base:::bio7:::Sys.sleep(time)
package:base:::bio7:::sys.source(file,envir=baseenv(),chdir=FALSE,keep.source=getOption("keep.source.pkgs"))
package:base:::bio7:::sys.status()
package:base:::bio7:::Sys.time()
package:base:::bio7:::Sys.timezone(location=TRUE)
package:base:::bio7:::Sys.umask(mode=NA)
package:base:::bio7:::Sys.unsetenv(x)
package:base:::bio7:::Sys.which(names)
package:base:::bio7:::system(command,intern=FALSE,ignore.stdout=FALSE,ignore.stderr=FALSE,wait=TRUE,input=NULL,show.output.on.console=TRUE,minimized=FALSE,invisible=TRUE)
package:base:::bio7:::system.file(...,package="base",lib.loc=NULL,mustWork=FALSE)
package:base:::bio7:::system.time(expr,gcFirst=TRUE)
package:base:::bio7:::system2(command,args=character(),stdout="",stderr="",stdin="",input=NULL,env=character(),wait=TRUE,minimized=FALSE,invisible=TRUE)
package:base:::bio7:::t(x)
package:base:::bio7:::TNA
package:base:::bio7:::t.data.frame(x)
package:base:::bio7:::t.default(x)
package:base:::bio7:::table(...,exclude=if(useNA=="no")c(NA,NaN),useNA=c("no","ifany","always"),dnn=list.names(...),deparse.level=1)
package:base:::bio7:::tabulate(bin,nbins=max(1,bin,na.rm=TRUE))
package:base:::bio7:::tan(x)
package:base:::bio7:::tanh(x)
package:base:::bio7:::tanpi(x)
package:base:::bio7:::tapply(X,INDEX,FUN=NULL,...,simplify=TRUE)
package:base:::bio7:::taskCallbackManager(handlers=list(),registered=FALSE,verbose=FALSE)
package:base:::bio7:::tcrossprod(x,y=NULL)
package:base:::bio7:::tempdir()
package:base:::bio7:::tempfile(pattern="file",tmpdir=tempdir(),fileext="")
package:base:::bio7:::testPlatformEquivalence(built,run)
package:base:::bio7:::textConnection(object,open="r",local=FALSE,encoding=c("","bytes","UTF-8"))
package:base:::bio7:::textConnectionValue(con)
package:base:::bio7:::tolower(x)
package:base:::bio7:::topenv(envir=parent.frame(),matchThisEnv=getOption("topLevelEnvironment"))
package:base:::bio7:::toString(x,...)
package:base:::bio7:::toString.default(x,width=NULL,...)
package:base:::bio7:::toupper(x)
package:base:::bio7:::trace(what,tracer,exit,at,print,signature,where=topenv(parent.frame()),edit=FALSE)
package:base:::bio7:::traceback(x=NULL,max.lines=getOption("deparse.max.lines"))
package:base:::bio7:::tracemem(x)
package:base:::bio7:::tracingState(on=NULL)
package:base:::bio7:::transform(`_data`,...)
package:base:::bio7:::transform.data.frame(`_data`,...)
package:base:::bio7:::transform.default(`_data`,...)
package:base:::bio7:::trigamma(x)
package:base:::bio7:::trunc(x,...)
package:base:::bio7:::trunc.Date(x,...)
package:base:::bio7:::trunc.POSIXt(x,units=c("secs","mins","hours","days"),...)
package:base:::bio7:::truncate(con,...)
package:base:::bio7:::truncate.connection(con,...)
package:base:::bio7:::try(expr,silent=FALSE)
package:base:::bio7:::tryCatch(expr,...,finally)
package:base:::bio7:::typeof(x)
package:base:::bio7:::unclass(x)
package:base:::bio7:::undebug(fun)
package:base:::bio7:::union(x,y)
package:base:::bio7:::unique(x,incomparables=FALSE,...)
package:base:::bio7:::unique.array(x,incomparables=FALSE,MARGIN=1,fromLast=FALSE,...)
package:base:::bio7:::unique.data.frame(x,incomparables=FALSE,fromLast=FALSE,...)
package:base:::bio7:::unique.default(x,incomparables=FALSE,fromLast=FALSE,nmax=NA,...)
package:base:::bio7:::unique.matrix(x,incomparables=FALSE,MARGIN=1,fromLast=FALSE,...)
package:base:::bio7:::unique.numeric_version(x,incomparables=FALSE,...)
package:base:::bio7:::unique.POSIXlt(x,incomparables=FALSE,...)
package:base:::bio7:::units(x)
package:base:::bio7:::units.difftime(x)
package:base:::bio7:::units<-(x,value)
package:base:::bio7:::units<-.difftime(x,value)
package:base:::bio7:::unix.time(expr,gcFirst=TRUE)
package:base:::bio7:::unlink(x,recursive=FALSE,force=FALSE)
package:base:::bio7:::unlist(x,recursive=TRUE,use.names=TRUE)
package:base:::bio7:::unloadNamespace(ns)
package:base:::bio7:::unlockBinding(sym,env)
package:base:::bio7:::unname(obj,force=FALSE)
package:base:::bio7:::unserialize(connection,refhook=NULL)
package:base:::bio7:::unsplit(value,f,drop=FALSE)
package:base:::bio7:::untrace(what,signature=NULL,where=topenv(parent.frame()))
package:base:::bio7:::untracemem(x)
package:base:::bio7:::unz(description,filename,open="",encoding=getOption("encoding"))
package:base:::bio7:::upper.tri(x,diag=FALSE)
package:base:::bio7:::url(description,open="",blocking=TRUE,encoding=getOption("encoding"))
package:base:::bio7:::UseMethod(generic,object)
package:base:::bio7:::utf8ToInt(x)
package:base:::bio7:::vapply(X,FUN,FUN.VALUE,...,USE.NAMES=TRUE)
package:base:::bio7:::vector(mode="logical",length=0)
package:base:::bio7:::Vectorize(FUN,vectorize.args=arg.names,SIMPLIFY=TRUE,USE.NAMES=TRUE)
package:base:::bio7:::versionNA
package:base:::bio7:::warning(...,call.=TRUE,immediate.=FALSE,noBreaks.=FALSE,domain=NULL)
package:base:::bio7:::warnings(...)
package:base:::bio7:::weekdays(x,abbreviate)
package:base:::bio7:::weekdays.Date(x,abbreviate=FALSE)
package:base:::bio7:::weekdays.POSIXt(x,abbreviate=FALSE)
package:base:::bio7:::which(x,arr.ind=FALSE,useNames=TRUE)
package:base:::bio7:::which.max(x)
package:base:::bio7:::which.min(x)
package:base:::bio7:::whileNULL
package:base:::bio7:::with(data,expr,...)
package:base:::bio7:::with.default(data,expr,...)
package:base:::bio7:::withCallingHandlers(expr,...)
package:base:::bio7:::within(data,expr,...)
package:base:::bio7:::within.data.frame(data,expr,...)
package:base:::bio7:::within.list(data,expr,...)
package:base:::bio7:::withRestarts(expr,...)
package:base:::bio7:::withVisible(x)
package:base:::bio7:::write(x,file="data",ncolumns=if(is.character(x))1else5,append=FALSE,sep="")
package:base:::bio7:::write.dcf(x,file="",append=FALSE,indent=0.1*getOption("width"),width=0.9*getOption("width"),keep.white=NULL)
package:base:::bio7:::writeBin(object,con,size=NA,endian=.Platform$endian,useBytes=FALSE)
package:base:::bio7:::writeChar(object,con,nchars=nchar(object,type="chars"),eos="",useBytes=FALSE)
package:base:::bio7:::writeLines(text,con=stdout(),sep="\n",useBytes=FALSE)
package:base:::bio7:::xor(x,y)
package:base:::bio7:::xor.hexmode(a,b)
package:base:::bio7:::xor.octmode(a,b)
package:base:::bio7:::xpdrows.data.frame(x,old.rows,new.rows)
package:base:::bio7:::xtfrm(x)
package:base:::bio7:::xtfrm.AsIs(x)
package:base:::bio7:::xtfrm.Date(x)
package:base:::bio7:::xtfrm.default(x)
package:base:::bio7:::xtfrm.difftime(x)
package:base:::bio7:::xtfrm.factor(x)
package:base:::bio7:::xtfrm.numeric_version(x)
package:base:::bio7:::xtfrm.POSIXct(x)
package:base:::bio7:::xtfrm.POSIXlt(x)
package:base:::bio7:::xtfrm.Surv(x)
package:base:::bio7:::xzfile(description,open="",encoding=getOption("encoding"),compression=6)
package:base:::bio7:::zapsmall(x,digits=getOption("digits"))
