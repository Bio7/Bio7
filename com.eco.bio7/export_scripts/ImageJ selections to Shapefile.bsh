/*

Author: M. Austenfeld 
Year:   2007-2013
Version 1.1

This is a Shapefile exporter which uses the packages 'sp' and 'maptools'
from R to export multiple selections from the ROI manager
of ImageJ to a shapefile. 
For a successful execution the ROI Manager has to be
active and one shape type has to be selected for the export.
Additionally a dataframe can be exported with the file 
(must have the same row length as the number of selections inside the 
ROI Manager! For example a dataframe from a before made Particle measurement!)

The combobox will display automatically the variables which are available
in the workspace of R. The selected variable (must be a dataframe!)will be
stored with the shapefile (use the "default" option to store a "dummy" dataframe!).
*/




/*Clear all variables from the workspace of BeanShell!*/
clear();

/*Reimport the default Bio7 and Java libs!*/

import com.eco.bio7.console.Bio7Console;
import com.eco.bio7.actions.Bio7Action;
import com.eco.bio7.batch.Bio7Dialog;
import com.eco.bio7.batch.Bio7Flow;
import com.eco.bio7.batch.FileRoot;
import com.eco.bio7.collection.CustomView;
import com.eco.bio7.collection.Work;
import com.eco.bio7.compile.GroovyInterpreter;
import com.eco.bio7.compile.BeanShellInterpreter;
import com.eco.bio7.compile.PythonInterpreter;
import com.eco.bio7.database.Bio7State;
import com.eco.bio7.discrete.CountValues;
import com.eco.bio7.discrete.Field;
import com.eco.bio7.discrete.LandscapeMetrics;
import com.eco.bio7.environment.Environment;
import com.eco.bio7.image.IJTabs;
import com.eco.bio7.image.ImageMethods;
import com.eco.bio7.image.Individual;
import com.eco.bio7.image.PointPanel;
import com.eco.bio7.image.measure.Bio7ImageJAnalyse;
import com.eco.bio7.methods.Compiled;
import com.eco.bio7.methods.Plant;
import com.eco.bio7.libreoffice.LibreOffice;
import com.eco.bio7.plot.ChartView;
import com.eco.bio7.rbridge.Bio7Grid;
import com.eco.bio7.rbridge.RServe;
import com.eco.bio7.rbridge.RState;
import com.eco.bio7.scriptengines.ScriptEngineConnection;
import com.eco.bio7.soil.Matrix;
import com.eco.bio7.spatial.SpatialCamera;
import com.eco.bio7.spatial.SpatialEvents;
import com.eco.bio7.spatial.SpatialLoader;
import com.eco.bio7.spatial.SpatialMath;
import com.eco.bio7.spatial.SpatialPicking;
import com.eco.bio7.spatial.SpatialUtil;
import com.eco.bio7.time.Time;
import com.eco.bio7.worldwind.Ww;
import org.rosuda.REngine.REXPMismatchException;
import org.rosuda.REngine.REngineException;
import org.rosuda.REngine.Rserve.RConnection;
import org.rosuda.REngine.Rserve.RserveException;
import javax.media.opengl.GL;
import javax.media.opengl.GL2;
import javax.media.opengl.glu.GLU;
import com.jogamp.opengl.util.gl2.GLUT;
import com.jogamp.opengl.util.texture.Texture;
import com.jogamp.opengl.util.awt.TextRenderer;
import com.eco.bio7.loader3d.OBJModel;
import com.eco.bio7.console.ConsolePageParticipant;
import ij.plugin.frame.RoiManager;
import ij.gui.Roi;
import java.awt.*;
import java.io.*;
import ij.*;
import ij.gui.*;
import ij.process.*;
import ij.plugin.PlugIn;
import ij.io.Opener;
import javax.swing.SwingUtilities;
import ij.gui.StackWindow;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JRadioButton;
import org.rosuda.JRclient.REXP;


public class ImageJSelectionExport {

	public ImageStack s;
	public ImagePlus plus;
	public ImageProcessor ip;
	public ImagePlus imp;
	public ButtonGroup buttonGroup;
	public JComboBox comboBox;
	public int polygon = 1;
	public String dataframe;
	public RConnection c;
	

	/*The Filesaver GUI!*/
	public String open() {
		String selected = Bio7Dialog.saveFile();
		if (Bio7Dialog.getOS().equals("Windows")) {
			if (selected != null) {
				selected = selected.replace("\\", "\\\\");
			}
		}

		return selected;
	}

	/*The export methods for Polygons, Lines and Points!*/
	public void exportShape() {
		ImagePlus imp = WindowManager.getCurrentImage();
		if (imp != null) {
			if (RoiManager.getInstance() != null) {
				Roi[] r = RoiManager.getInstance().getRoisAsArray();
				c = RServe.getConnection();
				if (RServe.isAlive()) {

					/*If polygon export is selected!*/
					if (polygon == 1) {

						c.eval("xl<-list()");
						c.eval("yl<-list()");
						c.eval("listpolygons<-list()");

						int u;
						int length = r.length;
						for (int i = 0; i < r.length; i++) {
							u = i + 1;
							Polygon p = r[i].getPolygon();
							int[] x = p.xpoints;
							int[] y = p.ypoints;

							c.assign("x", x);
							c.assign("y", y);
							/*Close the ring which is not default by ImageJ!*/
							c.eval("try(x<-append(x,x[1]))");
							c.eval("try(y<-append(y,y[1]))");

							c.eval("p" + u + "<-Polygon(cbind(x,y))");
							c.eval("try(polygons<-Polygons(list(p"
								+ u
								+ "),\""
								+ u
								+ "\"))");

							c.eval("try(listpolygons[[" + u + "]]<-polygons)");

							c.eval("remove(p" + u + ")");
							c.eval("remove(polygons" + u + ")");

						}

						c.eval("try(spatpolygons<-SpatialPolygons(listpolygons, 1:length(listpolygons)))");
						if (dataframe.equals("default")) {
							c.eval("try(poldata<-data.frame(number=c(1:"
								+ length
								+ "),row.names=as.character(1:"
								+ length
								+ ")))");
						} else {
							c.eval("try(poldata<-" + dataframe + ")");
						}

						//c.eval("try(polframe<-SpatialPolygonsDataFrame(spatpolygons, data=poldata, proj4string = CRS(\"+proj=longlat\")))");

						c.eval("try(polframe<-SpatialPolygonsDataFrame(spatpolygons, data=poldata))");
						String toopen = open();
						if (toopen != null) {
							c.eval("try(writePolyShape(polframe,\""
								+ toopen
								+ "\"))");
						}
					}
					/*If line export is selected!*/
					else if (polygon == 2) {

						c.eval("xl<-list()");
						c.eval("yl<-list()");
						c.eval("try(listlines<-list())");

						int u;
						int linelength = r.length;
						for (int i = 0; i < r.length; i++) {
							u = i + 1;
							Polygon p = r[i].getPolygon();
							int[] x = p.xpoints;
							int[] y = p.ypoints;

							c.assign("x", x);
							c.assign("y", y);

							c.eval("p" + u + "<-Line(cbind(x,y))");
							c.eval("try(lines<-Lines(list(p"
								+ u
								+ "),\""
								+ u
								+ "\"))");

							c.eval("try(listlines[[" + u + "]]<-lines)");

							c.eval("remove(p" + u + ")");
							c.eval("remove(lines" + u + ")");

						}
						RServe.getConnection().eval(
							"try(spatlines<-SpatialLines(listlines))");

						if (dataframe.equals("default")) {
							RServe.getConnection().eval(
								"try(linedata<-data.frame(number=c(1:"
									+ linelength
									+ "),row.names=as.character(1:"
									+ linelength
									+ ")))");
						} else {
							c.eval("try(linedata<-" + dataframe + ")");
						}

						c.eval("try(lineframe<-SpatialLinesDataFrame(spatlines, data=linedata))");
						String toopen = open();
						if (toopen != null) {
							c.eval("try(writeLinesShape(lineframe,\""
								+ toopen
								+ "\"))");
						}

					}
					/*If point export is selected!*/
					else {

						c.eval("xp<-NULL");
						c.eval("yp<-NULL");
						int u;
						int pointlength = r.length;
						for (int i = 0; i < r.length; i++) {
							u = i + 1;
							Polygon p = r[i].getPolygon();
							int[] x = p.xpoints;
							int[] y = p.ypoints;

							c.assign("x", x);
							c.assign("y", y);
							c.eval("try(xp<-append(xp,x))");
							c.eval("try(yp<-append(yp,y))");

						}
						c.eval("try(xy<-cbind(xp,yp))");

						c.eval("try(spatpoints<-SpatialPoints(xy))");
						if (dataframe.equals("default")) {
							c.eval("try(pointdata<-data.frame(number=c(1:"
								+ pointlength
								+ "),row.names=as.character(1:"
								+ pointlength
								+ ")))");
						} else {
							c.eval("try(pointdata<-" + dataframe + ")");
						}

						c.eval("try(pointframe<-SpatialPointsDataFrame(spatpoints, data=pointdata))");
						String toopen = open();
						if (toopen != null) {
							c.eval("try(writePointsShape(pointframe,\""
								+ toopen
								+ "\"))");
						}

					}

				} else {
					Bio7Dialog.message("No Rserve connection available!");
				}
			} else {
				Bio7Dialog.message("No ROI Manager available!");
			}

		} else {
			Bio7Dialog.message("No image available!");
		}
	}

	public void chooseShape() {
		JPanel panel = new JPanel();
		buttonGroup = new ButtonGroup();
		panel.setLayout(null);
		panel.setBounds(100, 100, 307, 195);

		JLabel selectTheTransferLabel = new JLabel();
		selectTheTransferLabel
			.setText("Select the transfer type (Lines: Only freehand and segmented lines are supported!)");
		selectTheTransferLabel.setBounds(10, 3, 432, 24);
		panel.add(selectTheTransferLabel);
		comboBox = new JComboBox();
		comboBox.addItem("default");
		showRVariables();

		comboBox.addPopupMenuListener(new PopupMenuListener() {

			public void popupMenuCanceled(PopupMenuEvent arg0) {
			}
			public void popupMenuWillBecomeInvisible(PopupMenuEvent arg0) {

			}
			public void popupMenuWillBecomeVisible(PopupMenuEvent arg0) {
				showRVariables();

			}
		});
		comboBox.setBounds(10, 91, 163, 20);
		panel.add(comboBox);

		JLabel selectDataframeLabel = new JLabel();
		selectDataframeLabel
			.setToolTipText("Select a dataframe with the length of the selected type");
		selectDataframeLabel.setText("Select dataframe");
		selectDataframeLabel.setBounds(10, 62, 82, 23);
		panel.add(selectDataframeLabel);

		JRadioButton polygonsRadioButton = new JRadioButton();
		buttonGroup.add(polygonsRadioButton);
		polygonsRadioButton.setText("Polygons");
		polygonsRadioButton.setSelected(true);
		polygonsRadioButton.setBounds(0, 33, 113, 23);
		panel.add(polygonsRadioButton);

		JRadioButton linesRadioButton = new JRadioButton();
		linesRadioButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

			}
		});
		buttonGroup.add(linesRadioButton);
		linesRadioButton.setText("Lines");
		linesRadioButton
			.setToolTipText("Only freehand and segmented lines are supported!");
		linesRadioButton.setBounds(119, 33, 113, 23);
		panel.add(linesRadioButton);

		JRadioButton pointsRadioButton = new JRadioButton();
		buttonGroup.add(pointsRadioButton);
		pointsRadioButton.setText("Points");
		pointsRadioButton.setBounds(238, 33, 113, 23);
		panel.add(pointsRadioButton);

		JButton proceedButton = new JButton();
		proceedButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				dataframe = comboBox.getSelectedItem();

				if (polygonsRadioButton.isSelected()) {
					polygon = 1;
				} else if (linesRadioButton.isSelected()) {
					polygon = 2;
				} else {
					polygon = 3;
				}
				exportShape();

			}
		});
		proceedButton.setText("Save");
		proceedButton.setBounds(10, 117, 163, 23);
		panel.add(proceedButton);
		CustomView view = new CustomView();
		view.setPanel(panel, "Shapefile exporter");
	}

	public void showRVariables() {
		comboBox.removeAllItems();
		comboBox.addItem("default");
		if (RServe.isAlive()) {

			// List all variables in workspace!
			RServe.getConnection().eval("var<-ls()");

			String[] x = RServe.getConnection().eval("var").asStrings();

			if (x != null && x.length >= 0) {

				for (int i = 0; i < x.length; i++) {

					comboBox.addItem(x[i]);
					comboBox.setEditable(true);

				}

			}
		}

	}
	public void startExport() {
		if (RServe.getConnection() != null) {
			if (RServe.getConnection().eval("require(maptools)").isTrue()[0]) {

				RServe.getConnection().eval("library(maptools)");
				RServe.getConnection().eval("library(sp)");

				chooseShape();

			} else {
				Bio7Dialog.message("Can't load 'maptools' package!");
			}
		} else {
			Bio7Dialog.message("No Rserve connection available!");
		}
	}
}
ImageJSelectionExport ex=new ImageJSelectionExport();
ex.startExport();

